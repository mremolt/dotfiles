!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
%	vim/bundle/matchit.zip/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	vim/bundle/matchit.zip/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	vim/bundle/matchit.zip/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
+=	vim/plugin/autotag.vim	/^            cmd += " '%s'" % source$/;"	m
.	vim/bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
.	vim/bundle/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
<C-G>S	vim/bundle/vim-surround/plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	vim/bundle/vim-surround/plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-R>	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> <C-R> <C-R>:JSLintUpdate<CR>$/;"	m
<C-R>	vim/bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<C-R>	vim/bundle/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<C-S>	vim/bundle/vim-surround/plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<C-W><C-]>	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W><C-]>  :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W>]	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W>]      :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W>}	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W>}      :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
<C-X><CR>	vim/bundle/vim-endwise/plugin/endwise.vim	/^    imap <C-X><CR> <CR><Plug>AlwaysEnd$/;"	m
<C-]>	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-]>       :<C-U>exe <SID>jump('edit',v:count)<CR>$/;"	m
<CR>	vim/bundle/vim-endwise/plugin/endwise.vim	/^    imap <CR>      <CR><Plug>DiscretionaryEnd$/;"	m
<Leader>rwp	vim/bundle/vim-align/plugin/cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	vim/bundle/vim-align/plugin/cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<M-o>	vim/bundle/vim-endwise/plugin/endwise.vim	/^    inoremap <M-o> <C-O>o$/;"	m
<Plug>AM_Htd	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_T|	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T;	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T=	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_T?	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T@	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_Tab	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Ts,	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Tsp	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_T~	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a(	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>AlwaysEnd	vim/bundle/vim-endwise/plugin/endwise.vim	/^    imap    <script> <Plug>AlwaysEnd        <SID>AlwaysEnd$/;"	m
<Plug>Coerce	vim/bundle/vim-abolish/plugin/abolish.vim	/^nnoremap <silent> <Plug>Coerce :<C-U>call <SID>coerce(nr2char(getchar()))<CR>$/;"	m
<Plug>Csurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DiscretionaryEnd	vim/bundle/vim-endwise/plugin/endwise.vim	/^    imap    <script> <Plug>DiscretionaryEnd <SID>DiscretionaryEnd$/;"	m
<Plug>Dsurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	vim/bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	vim/bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	vim/bundle/vim-align/plugin/cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	vim/bundle/vim-align/plugin/cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>SuperTabBackward	vim/bundle/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	vim/bundle/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<Plug>ToggleBackground	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a$/;"	m
<Plug>ToggleBackground	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG$/;"	m
<Plug>ToggleBackground	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv$/;"	m
<Plug>VSurround	vim/bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	vim/bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>Vsurround	vim/bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>ZoomWin	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^nnoremap <silent> <script> <Plug>ZoomWin :set lz<CR>:silent call ZoomWin#ZoomWin()<CR>:set nolz<CR>$/;"	m
<Plug>unimpairedBlankDown	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>put =repeat(nr2char(10),v:count)<Bar>'[-1<CR>$/;"	m
<Plug>unimpairedBlankUp	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>put!=repeat(nr2char(10),v:count)<Bar>']+1<CR>$/;"	m
<Plug>unimpairedMoveDown	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown :<C-U>exe 'norm m`'<Bar>exe 'move+'.v:count1<CR>``$/;"	m
<Plug>unimpairedMoveUp	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp   :<C-U>exe 'norm m`'<Bar>exe 'move--'.v:count1<CR>``$/;"	m
<Plug>unimpairedONext	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedONext     :<C-U>edit `=<SID>FileByOffset(v:count1)`<CR>$/;"	m
<Plug>unimpairedOPrevious	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedOPrevious :<C-U>edit `=<SID>FileByOffset(-v:count1)`<CR>$/;"	m
<SID>AlwaysEnd	vim/bundle/vim-endwise/plugin/endwise.vim	/^    inoremap <silent> <SID>AlwaysEnd        <C-R>=<SID>crend(1)<CR>$/;"	m
<SID>DiscretionaryEnd	vim/bundle/vim-endwise/plugin/endwise.vim	/^    inoremap <silent> <SID>DiscretionaryEnd <C-R>=<SID>crend(0)<CR>$/;"	m
<SID>TogBG	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^noremap <SID>TogBG  :call <SID>TogBG()<CR>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>xx	vim/bundle/rails.vim/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	vim/bundle/taglist.vim/plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<SID>xx	vim/bundle/vim-rails/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<c-n>	vim/bundle/supertab/plugin/supertab.vim	/^    imap <c-n> <Plug>SuperTabForward$/;"	m
<c-p>	vim/bundle/supertab/plugin/supertab.vim	/^    imap <c-p> <Plug>SuperTabBackward$/;"	m
<c-r><tab>	vim/bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-w>o	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^ nmap <unique> <c-w>o  <Plug>ZoomWin$/;"	m
<c-x>	vim/bundle/supertab/plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	vim/bundle/supertab/plugin/supertab.vim	/^      inoremap <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<leader>ca	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<plug>NERDCommenterAlignBoth	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	vim/bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	vim/bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
=	vim/plugin/autotag.vim	/^         cmd = "%s -a " % (self.ctags_cmd,)$/;"	m
=	vim/plugin/autotag.vim	/^         cmd = "%s -f %s -a " % (self.ctags_cmd, self.tags_file)$/;"	m
AR	vim/bundle/Command-T/ruby/command-t/Makefile	/^AR = ar$/;"	m
Abbrev	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
Abbrev	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
Abolish	vim/bundle/vim-abolish/plugin/abolish.vim	/^  let Abolish = {}$/;"	v
Abolish	vim/bundle/vim-abolish/plugin/abolish.vim	/^command! -nargs=+ -bang -bar -range=0 -complete=custom,s:Complete Abolish$/;"	c
Abolished	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! Abolished()$/;"	f
Ack	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file Ack call s:Ack('grep<bang>',<q-args>)$/;"	c
Ack	vim/bundle/ack.vim/plugin/ack.vim	/^function! s:Ack(cmd, args)$/;"	f
AckAdd	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckAdd call s:Ack('grepadd<bang>', <q-args>)$/;"	c
AckFile	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFile call s:Ack('grep<bang> -g', <q-args>)$/;"	c
AckFromSearch	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFromSearch call s:AckFromSearch('grep<bang>', <q-args>)$/;"	c
AckFromSearch	vim/bundle/ack.vim/plugin/ack.vim	/^function! s:AckFromSearch(cmd, args)$/;"	f
ActivateJSLintQuickFixWindow	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    function s:ActivateJSLintQuickFixWindow()$/;"	f
Add	vim/bundle/vim-cucumber/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
AddBracketExpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddBracketExpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddColonExpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddLeftDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddParenExpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddParenExpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddRightDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddSelectiveExpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddSelectiveExpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
AddTabExpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
Align	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	vim/bundle/vim-align/autoload/Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	vim/bundle/vim-align/autoload/Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	vim/bundle/vim-align/autoload/Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	vim/bundle/vim-align/autoload/Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	vim/bundle/vim-align/autoload/Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
Align.vim	vim/bundle/vim-align/autoload/Align.vim	1;"	F
AlignCtrl	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	vim/bundle/vim-align/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignMaps.vim	vim/bundle/vim-align/autoload/AlignMaps.vim	1;"	F
AlignMapsPlugin.vim	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	1;"	F
AlignPlugin.vim	vim/bundle/vim-align/plugin/AlignPlugin.vim	1;"	F
AlignPop	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
AllowQuote	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:AllowQuote(char, isBS)$/;"	f
AltMultipart	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
Alternate	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
Alternate	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
AppendCommentToLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
AutoCloseOff	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^command! AutoCloseOff :let b:AutoCloseOn = 0$/;"	c
AutoCloseOn	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^command! AutoCloseOn :let b:AutoCloseOn = 1$/;"	c
AutoCloseToggle	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^command! AutoCloseToggle :call s:ToggleAutoClose()$/;"	c
AutoTag	vim/plugin/autotag.vim	/^function! AutoTag()$/;"	f
BINDIR	vim/bundle/Command-T/ruby/command-t/Makefile	/^BINDIR        = $(bindir)$/;"	m
Backspace	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:Backspace()$/;"	f
BackwardsSnippet	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bar	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^  class Bar$/;"	c	class:Foo
Baz	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^    def Baz$/;"	f	class:Foo.Bar
Blame	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameJump	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
Bookmark.AddBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Browse	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
BufAbbreviations	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufAbbreviations	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufCommands	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufDatabase	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufFinderCommands	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufHasErrors	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:BufHasErrors()$/;"	f
BufHasErrorsOrWarnings	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarnings()$/;"	f
BufHasErrorsOrWarningsToDisplay	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarningsToDisplay()$/;"	f
BufInit	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInit	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufInitStatusline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufMappings	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufMappings	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufModelines	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufNavCommands	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufReadIndex	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndex()$/;"	f
BufReadIndexFile	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndexFile()$/;"	f
BufReadObject	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadObject()$/;"	f
BufScriptWrappers	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufScriptWrappers	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSettings	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSignIds	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:BufSignIds()$/;"	f
BufSyntax	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BufSyntax	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BufWriteIndexFile	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:BufWriteIndexFile()$/;"	f
Buffer	vim/bundle/Command-T/spec/command-t/scanner/buffer_scanner_spec.rb	/^  class Buffer; end$/;"	c	class:VIM
BufferFinder	vim/bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^  class BufferFinder < Finder$/;"	c	class:CommandT
BufferScanner	vim/bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^  class BufferScanner < Scanner$/;"	c	class:CommandT
BuildTabStops	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
Bundle	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=+         Bundle$/;"	c
BundleClean	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=? -bang   BundleClean$/;"	c
BundleDocs	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=0         BundleDocs $/;"	c
BundleInstall	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall$/;"	c
BundleSearch	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=? -bang   BundleSearch$/;"	c
Bundles	vim/bundle/vundle/autoload/vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete Bundles$/;"	c
CC	vim/bundle/Command-T/ruby/command-t/Makefile	/^CC = gcc$/;"	m
CFLAGS	vim/bundle/Command-T/ruby/command-t/Makefile	/^CFLAGS   =  -fPIC -fno-strict-aliasing -g -g -O2  -fPIC $(cflags) $/;"	m
CLEANFILES	vim/bundle/Command-T/ruby/command-t/Makefile	/^CLEANFILES = mkmf.log$/;"	m
CLEANLIBS	vim/bundle/Command-T/ruby/command-t/Makefile	/^CLEANLIBS     = $(TARGET).so $(TARGET).il? $(TARGET).tds $(TARGET).map$/;"	m
CLEANOBJS	vim/bundle/Command-T/ruby/command-t/Makefile	/^CLEANOBJS     = *.o *.a *.s[ol] *.pdb *.exp *.bak$/;"	m
COPY	vim/bundle/Command-T/ruby/command-t/Makefile	/^COPY = cp$/;"	m
CPPFLAGS	vim/bundle/Command-T/ruby/command-t/Makefile	/^CPPFLAGS = -DHAVE_RUBY_H  $(DEFS) $(cppflags)$/;"	m
CXXFLAGS	vim/bundle/Command-T/ruby/command-t/Makefile	/^CXXFLAGS = $(CFLAGS) $/;"	m
CacheErrors	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:CacheErrors()$/;"	f
CanCommentLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CaptureKeyPresses	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CaptureKeyPresses()$/;"	f
CdIfDirectory	vim/functions.vim	/^function s:CdIfDirectory(directory)$/;"	f
ChangeDirectory	vim/functions.vim	/^function ChangeDirectory(dir, ...)$/;"	f
CheckPKG	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:CheckPKG(name, ...)$/;"	f
CheckPair	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:CheckPair(char)$/;"	f
CheckPhp	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:CheckPhp()$/;"	f
CheckPython	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:CheckPython()$/;"	f
CheckRuby	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:CheckRuby()$/;"	f
Checkable	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:Checkable(ft)$/;"	f
Choose	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
CleanUp	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
Close	vim/bundle/snipmate.vim/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CloseIfOnlyNerdTreeLeft	vim/functions.vim	/^function s:CloseIfOnlyNerdTreeLeft()$/;"	f
ClosePair	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:ClosePair(char)$/;"	f
CoffeeCompile	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^command! -range=% -bar CoffeeCompile call s:CoffeeCompile(<line1>, <line2>)$/;"	c
CoffeeCompile	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline)$/;"	f
CoffeeCompileResetPos	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetPos()$/;"	f
CoffeeCompileSavePos	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileSavePos()$/;"	f
CoffeeMake	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake make<bang> <args>$/;"	c
CoffeeRun	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^command! -range=% -bar CoffeeRun <line1>,<line2>:w !coffee -s$/;"	c
CommandCabbr	vim/functions.vim	/^function s:CommandCabbr(abbreviation, expansion)$/;"	f
CommandEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandLineCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommandList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandT	vim/bundle/Command-T/plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShowFileFinder(<q-args>)$/;"	c
CommandT	vim/bundle/Command-T/ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/Command-T/ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBuffer	vim/bundle/Command-T/plugin/command-t.vim	/^command CommandTBuffer call <SID>CommandTShowBufferFinder()$/;"	c
CommandTCancel	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	vim/bundle/Command-T/plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	vim/bundle/Command-T/plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTMatch_initialize	vim/bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatch_matches	vim/bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f
CommandTMatch_to_s	vim/bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f
CommandTMatcher_initialize	vim/bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatcher_matches_for	vim/bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f
CommandTMatcher_sorted_matches_for	vim/bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f
CommandTRubyWarning	vim/bundle/Command-T/plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShowBufferFinder	vim/bundle/Command-T/plugin/command-t.vim	/^function s:CommandTShowBufferFinder()$/;"	f
CommandTShowFileFinder	vim/bundle/Command-T/plugin/command-t.vim	/^function s:CommandTShowFileFinder(arg)$/;"	f
CommandTToggleFocus	vim/bundle/Command-T/plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	vim/bundle/Command-T/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f
CommentBlock	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
Commit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Commit(args) abort$/;"	f
CommitComplete	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CompilerSet	vim/bundle/vim-cucumber/compiler/cucumber.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:Complete(A,L,P)$/;"	f
Complete_cd	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_cd	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_console	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_destroy	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_edit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_environments	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_find	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_generate	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_preview	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_rake	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_related	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_ruby	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_script	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_server	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
Complete_set	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
CompletionReset	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CompletionReset(char)$/;"	f
ContextCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextText()$/;"	f
Controller	vim/bundle/Command-T/ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
ConvertLeadingSpacesToTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Count	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountNonESCedOccurances	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CountQuotes	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:CountQuotes(char)$/;"	f
CreateDelimMapFromCms	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateExtraMaps	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:CreateExtraMaps()$/;"	f
CreateMaps	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMaps	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:CreateMaps()$/;"	f
CreateMenuItems	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CreateMenus	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateMenus	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreatePairsMaps	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:CreatePairsMaps()$/;"	f
CucumberComplete	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
CustomComplete	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
CustomComplete	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
Cycle	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Cycle  :call s:cycle()$/;"	c
DEFFILE	vim/bundle/Command-T/ruby/command-t/Makefile	/^DEFFILE = $/;"	m
DEFS	vim/bundle/Command-T/ruby/command-t/Makefile	/^DEFS     = $/;"	m
DISTCLEANFILES	vim/bundle/Command-T/ruby/command-t/Makefile	/^DISTCLEANFILES = $/;"	m
DLDFLAGS	vim/bundle/Command-T/ruby/command-t/Makefile	/^DLDFLAGS = $(ldflags) $(dldflags) $(archflag)$/;"	m
DLLIB	vim/bundle/Command-T/ruby/command-t/Makefile	/^DLLIB = $(TARGET).so$/;"	m
DM	vim/bundle/vim-align/plugin/cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DefineCommand	vim/functions.vim	/^function s:DefineCommand(name, destination)$/;"	f
DefineSnips	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DefineVariables	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:DefineVariables()$/;"	f
Delete	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:Delete()$/;"	f
DestroyMark	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
Detect	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Detect(path)$/;"	f
Detect	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
Diff	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Diff(bang,...) abort$/;"	f
DiffGitCached	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DirComplete	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
Disable	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:Disable(...)$/;"	f
Doc	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
Doc	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
DoesBlockHaveDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
EXEEXT	vim/bundle/Command-T/ruby/command-t/Makefile	/^EXEEXT = $/;"	m
EXTSTATIC	vim/bundle/Command-T/ruby/command-t/Makefile	/^EXTSTATIC = $/;"	m
Edit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
Edit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Edit(cmd,...) abort$/;"	f
Edit	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Edit   :call s:choose('edit')$/;"	c
Edit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
Edit	vim/functions.vim	/^function Edit(file)$/;"	f
EditComplete	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditSimpleRb	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
EditSimpleRb	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
EmptyBuffer	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:EmptyBuffer()$/;"	f
Enable	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:Enable(...)$/;"	f
EnableLongestEnhancement	vim/bundle/supertab/plugin/supertab.vim	/^function! s:EnableLongestEnhancement()$/;"	f
EraseCharsOnLine	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:EraseCharsOnLine(len)$/;"	f
Errors	vim/bundle/syntastic/plugin/syntastic.vim	/^command Errors call s:ShowLocList()$/;"	c
Errors	vim/bundle/syntastic/plugin/syntastic.vim	/^function s:Errors()$/;"	f
ErrorsForType	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:ErrorsForType(type)$/;"	f
Esc	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
ExecuteInTree	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
ExitingOneLineScope	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
ExpandMap	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ExpandMap(map)$/;"	f
Extract	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
Extract	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractGitDir	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:ExtractGitDir(path) abort$/;"	f
ExtractSnips	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileByOffset	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:FileByOffset(num)$/;"	f
FileCommand	vim/functions.vim	/^function s:FileCommand(name, ...)$/;"	f
FileFinder	vim/bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^  class FileFinder < Finder$/;"	c	class:CommandT
FileLimitExceeded	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.FileScanner
FileRead	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:FileRead()$/;"	f
FileScanner	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^  class FileScanner < Scanner$/;"	c	class:CommandT
Filename	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
Find	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
Find	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
FindBoundingLinesOfSexyCom	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindComment	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:FindComment(linenum)$/;"	f
FindDelimiterIndex	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
Finder	vim/bundle/Command-T/ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
FinishCommit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:FinishCommit()$/;"	f
Fixup	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Fixup  :call s:choose('fixup')$/;"	c
FlushBuffer	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:FlushBuffer()$/;"	f
Foo	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^class Foo$/;"	c
Foo	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^module Foo$/;"	m
Formatter	vim/bundle/Command-T/spec/vim_formatter.rb	/^    module Formatter$/;"	m	class:Spec.Runner
ForwardBack	vim/bundle/supertab/plugin/supertab.vim	/^  function! s:ForwardBack(command, map)$/;"	f
GF	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GetCharAhead	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetCharAhead(len)$/;"	f
GetCharBehind	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetCharBehind(len)$/;"	f
GetCoffeeIndent	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! GetCoffeeIndent(curlinenum)$/;"	f
GetCoffeeIndent	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:GetCoffeeIndent(curlinenum)$/;"	f
GetCucumberIndent	vim/bundle/vim-cucumber/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetCurrentSyntaxRegion	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetCurrentSyntaxRegion()$/;"	f
GetCurrentSyntaxRegionIf	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetCurrentSyntaxRegionIf(char)$/;"	f
GetGitconfigIndent	vim/bundle/vim-git/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetJSLintMessage	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:GetJSLintMessage()$/;"	f
GetJavascriptIndent	vim/bundle/vim-javascript/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetMSL	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
GetMatch	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:GetMatch(curline)$/;"	f
GetNextChar	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetNextChar()$/;"	f
GetPrevChar	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:GetPrevChar()$/;"	f
GetPrevNormalLine	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetQuickFixStackCount	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    function s:GetQuickFixStackCount()$/;"	f
GetSexyComLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetShell	vim/bundle/syntastic/syntax_checkers/sh.vim	/^function! GetShell()$/;"	f
GetSnippet	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetTrimmedLine	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
Git	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Git(bang,cmd) abort$/;"	f
GitComplete	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:GitComplete(A,L,P) abort$/;"	f
GoWinbufnr	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
GotoWinNum	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! s:GotoWinNum(winnum)$/;"	f
Grep	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Grep(bang,arg) abort$/;"	f
HandleTextObjectMapping	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>HandleTextObjectMapping(inner, incbelow, vis, range)$/;"	f
HasCStyleComments	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HiDefaults	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiDefaults	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	vim/bundle/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/bundle/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
INCFLAGS	vim/bundle/Command-T/ruby/command-t/Makefile	/^INCFLAGS = -I. -I$(topdir) -I$(hdrdir) -I$(srcdir)$/;"	m
INSTALL	vim/bundle/Command-T/ruby/command-t/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLATION_DIR	vim/bundle/vim-textobj-user/Makefile	/^INSTALLATION_DIR := $(HOME)\/.vim$/;"	m
INSTALL_DATA	vim/bundle/Command-T/ruby/command-t/Makefile	/^INSTALL_DATA = $(INSTALL) -m 644$/;"	m
INSTALL_PROG	vim/bundle/Command-T/ruby/command-t/Makefile	/^INSTALL_PROG = $(INSTALL) -m 0755$/;"	m
InOneLineScope	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:InOneLineScope(lnum)$/;"	f
IndentWithContinuation	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
Init	vim/bundle/supertab/plugin/supertab.vim	/^function! s:Init()$/;"	f
Init	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:Init()$/;"	f
InitBuffer	vim/bundle/supertab/plugin/supertab.vim	/^function! s:InitBuffer()$/;"	f
InitStatusline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
InitStatusline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
InitVariable	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
Init_ext	vim/bundle/Command-T/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InjectIntoStatusline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InjectIntoStatusline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InsertCharsOnLine	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:InsertCharsOnLine(str)$/;"	f
InsertPair	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:InsertPair(char)$/;"	f
InsertRefs	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Invert	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
Invert	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
InvertComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsComment	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsCommentLine	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentLine(linenum)$/;"	f
IsCommentOrString	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsCommented	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEmptyPair	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:IsEmptyPair()$/;"	f
IsEscaped	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsForbidden	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:IsForbidden(char)$/;"	f
IsInSexyComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsInString	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrComment	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsLoadedOnBuffer	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:IsLoadedOnBuffer()$/;"	f
IsNumEven	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsString	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:IsString(linenum, col)$/;"	f
JSLint	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^function! s:JSLint()$/;"	f
JSLintClear	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^function! s:JSLintClear()$/;"	f
JSLintToggle	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  command JSLintToggle :let b:jslint_disabled = exists('b:jslint_disabled') ? b:jslint_disabled ? 0 : 1 : 1$/;"	c
JSLintUpdate	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  command JSLintUpdate :call s:JSLintUpdate()$/;"	c
JSLintUpdate	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:JSLintUpdate()$/;"	f
JumpInit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:JumpInit() abort$/;"	f
K	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
KeyMap.All	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
LAck	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file LAck call s:Ack('lgrep<bang>', <q-args>)$/;"	c
LAckAdd	vim/bundle/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file LAckAdd call s:Ack('lgrepadd<bang>', <q-args>)$/;"	c
LDSHARED	vim/bundle/Command-T/ruby/command-t/Makefile	/^LDSHARED = $(CC) -shared$/;"	m
LIBPATH	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBPATH =  -L. -L$(libdir)$/;"	m
LIBRUBY	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBRUBY = $(LIBRUBY_SO)$/;"	m
LIBRUBYARG_SHARED	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBRUBYARG_SHARED = -l$(RUBY_SO_NAME)$/;"	m
LIBRUBYARG_STATIC	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBRUBYARG_STATIC = -l$(RUBY_SO_NAME)-static$/;"	m
LIBRUBY_A	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBRUBY_A = lib$(RUBY_SO_NAME)-static.a$/;"	m
LIBS	vim/bundle/Command-T/ruby/command-t/Makefile	/^LIBS = $(LIBRUBYARG_SHARED)  -lpthread -lrt -ldl -lcrypt -lm   -lc$/;"	m
LOCAL_LIBS	vim/bundle/Command-T/ruby/command-t/Makefile	/^LOCAL_LIBS = $/;"	m
LastIndexOfDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LineHasOpeningBrackets	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LocalModelines	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
LocalModelines	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
Log	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Log(cmd,...)$/;"	f
Log	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
MAKEDIRS	vim/bundle/Command-T/ruby/command-t/Makefile	/^MAKEDIRS = mkdir -p$/;"	m
MakeSnip	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	vim/bundle/vim-align/autoload/Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
Makefile	vim/bundle/Command-T/Makefile	1;"	F
Makefile	vim/bundle/Command-T/ruby/command-t/Makefile	1;"	F
Makefile	vim/bundle/supertab/Makefile	1;"	F
Makefile	vim/bundle/vim-rspec/Makefile	1;"	F
Makefile	vim/bundle/vim-textobj-user/Makefile	1;"	F
ManualCompletionEnter	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
MapNextFamily	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd)$/;"	f
MapTransform	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MapTransform(algorithm, key)$/;"	f
Match	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:Match(lnum, regex)$/;"	f
MatchDebug	vim/bundle/matchit.zip/plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchWindow	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
Match_debug	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	vim/bundle/matchit.zip/plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MaxLookback	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
MenuController.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Mkdir	vim/functions.vim	/^function Mkdir(file)$/;"	f
Move	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Move(force,destination)$/;"	f
MoveComplete	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P)$/;"	f
MultiMatch	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
Multipart	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
NERDComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDCommenter	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^augroup NERDCommenter$/;"	a
NERDTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NERD_commenter.vim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	1;"	F
NERD_tree.vim	vim/bundle/nerdtree/plugin/NERD_tree.vim	1;"	F
Navcommand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
Navcommand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NerdEcho	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NewProject	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
NumLinesInBuf	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OBJS	vim/bundle/Command-T/ruby/command-t/Makefile	/^OBJS = match.o matcher.o ext.o$/;"	m
ParseSkip	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Path.AbsolutePathFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PathUtilities	vim/bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^    module PathUtilities$/;"	m	class:CommandT.VIM
Pick	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Pick   :call s:choose('pick')$/;"	c
PlaceDelimitersAndInsBetween	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
PopBuffer	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:PopBuffer()$/;"	f
PrevNonBlankNonString	vim/bundle/vim-javascript/indent/javascript.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
Preview	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
Preview	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
ProcessFile	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
ProjectMenu	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Prompt	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
PushBuffer	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:PushBuffer(char)$/;"	f
QArgSplitter	vim/bundle/vim-align/autoload/Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
RARRAY_LEN	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	38;"	d
REPOS_TYPE	vim/bundle/vim-textobj-user/Makefile	/^REPOS_TYPE := vim-script$/;"	m
RFLOAT_VALUE	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	48;"	d
RM	vim/bundle/Command-T/ruby/command-t/Makefile	/^RM = rm -f$/;"	m
RM	vim/bundle/vim-align/plugin/cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RSTRING_LEN	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	28;"	d
RUBY	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBY = $(ruby)$/;"	m
RUBYARCHDIR	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBYARCHDIR   = $(sitearchdir)$(target_prefix)$/;"	m
RUBYCOMMONDIR	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBYCOMMONDIR = $(sitedir)$(target_prefix)$/;"	m
RUBYLIBDIR	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBYLIBDIR    = $(sitelibdir)$(target_prefix)$/;"	m
RUBY_EXTCONF_H	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBY_EXTCONF_H = $/;"	m
RUBY_INSTALL_NAME	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBY_INSTALL_NAME = ruby1.8$/;"	m
RUBY_SO_NAME	vim/bundle/Command-T/ruby/command-t/Makefile	/^RUBY_SO_NAME = ruby1.8$/;"	m
RWP	vim/bundle/vim-align/plugin/cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Rails	vim/bundle/rails.vim/plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
Rails	vim/bundle/vim-rails/plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsBufInit	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFile	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFilePath	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFileType	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsFind	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsHelpCommand	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludeexpr	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsIncludefind	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsNamedRoutes	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRevision	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	vim/bundle/rails.vim/autoload/rails.vim	/^function! RailsRoot()$/;"	f
RailsRoot	vim/bundle/vim-rails/autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
Rake	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
Ref	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Refresh	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
Refresh	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
RefreshBuffer	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
RefreshSigns	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:RefreshSigns()$/;"	f
RegHandler	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:RegHandler(regex, function, args)$/;"	f
Related	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
Related	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
ReleaseKeyPresses	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ReleaseKeyPresses()$/;"	f
ReloadAllSnippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ReloadAllSnippets()$/;"	f
ReloadSnippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ReloadSnippets(ft)$/;"	f
Remove	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Remove(force)$/;"	f
Remove	vim/functions.vim	/^function Remove(file)$/;"	f
RemoveDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSigns	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:RemoveSigns(ids)$/;"	f
RemoveSnippet	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ReplaceCmd	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
ReplaceDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ResetAllSnippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ResetAllSnippets()$/;"	f
ResetSnippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ResetSnippets(ft)$/;"	f
Resolve	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreMark	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestorePosn	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! s:RestorePosn(savedposn)$/;"	f
RestoreScreenState	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreUserMaps	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
Reword	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Reword :call s:choose('reword')$/;"	c
Right	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
RunSpec	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^command! RunSpec	call RunSpec()$/;"	c
RunSpec	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! RunSpec()$/;"	f
RunSpecMain	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:RunSpecMain(type)$/;"	f
RunSpecs	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^command! RunSpecs	call RunSpecs()$/;"	c
RunSpecs	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! RunSpecs()$/;"	f
Runner	vim/bundle/Command-T/spec/vim_formatter.rb	/^  module Runner$/;"	m	class:Spec
S	vim/bundle/vim-abolish/plugin/abolish.vim	/^  command -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete S$/;"	c
S	vim/bundle/vim-surround/plugin/surround.vim	/^      vmap  S    <Plug>VSurround$/;"	m
SHELL	vim/bundle/Command-T/ruby/command-t/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	vim/bundle/supertab/Makefile	/^SHELL=\/bin\/bash$/;"	m
SM	vim/bundle/vim-align/plugin/cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SRCS	vim/bundle/Command-T/ruby/command-t/Makefile	/^SRCS = match.c matcher.c ext.c$/;"	m
STATIC_LIB	vim/bundle/Command-T/ruby/command-t/Makefile	/^STATIC_LIB = $/;"	m
SWP	vim/bundle/vim-align/plugin/cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SavePosn	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! s:SavePosn(savewinhoriz)$/;"	f
SaveScreenState	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveUserMaps	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	vim/bundle/vim-align/plugin/cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
Scanner	vim/bundle/Command-T/ruby/command-t/scanner.rb	/^  class Scanner; end$/;"	c	class:CommandT
Screen	vim/bundle/Command-T/ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
SearchHeaders	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! s:SearchHeaders()$/;"	f
SearchPair	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:SearchPair(start, end)$/;"	f
SelectCompletion	vim/bundle/supertab/plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SelectWord	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Set	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
Set	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetBasePath	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetMakePrg	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^function! s:SetMakePrg()$/;"	f
SetOptDefault	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetOptDefault	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetOption	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
SetUpForNewFiletype	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
Settings	vim/bundle/Command-T/ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
ShouldSkip	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
ShowAvailableSnips	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowLocList	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:ShowLocList()$/;"	f
SignErrors	vim/bundle/syntastic/plugin/syntastic.vim	/^function s:SignErrors()$/;"	f
SkipExpr	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SmartSearch	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
SolarizedHiTrail	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedHiTrail	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
SolarizedMenu	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
SolarizedOptions	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
Spec	vim/bundle/Command-T/spec/vim_formatter.rb	/^module Spec$/;"	m
Squash	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^command! -buffer -bar Squash :call s:choose('squash')$/;"	c
StageDiff	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiff(...) abort$/;"	f
StagePatch	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageToggle	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
StartTerm	vim/functions.vim	/^function StartTerm()$/;"	f
Status	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
StringDecode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:StringDecode(str)$/;"	f
StringEncode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:StringEncode(str)$/;"	f
Strlen	vim/bundle/vim-align/autoload/Align.vim	/^fun! s:Strlen(x)$/;"	f
Stub	vim/bundle/Command-T/ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SubComplete	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:SubComplete(A,L,P)$/;"	f
Subvert	vim/bundle/vim-abolish/plugin/abolish.vim	/^command! -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete Subvert$/;"	c
SuperTab	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	vim/bundle/supertab/plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabLongestHighlight	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabLongestHighlight(dir)$/;"	f
SuperTabSetCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
SyntasticDisable	vim/bundle/syntastic/plugin/syntastic.vim	/^command! -nargs=? SyntasticDisable call s:Disable(<f-args>)$/;"	c
SyntasticEnable	vim/bundle/syntastic/plugin/syntastic.vim	/^command! -nargs=? SyntasticEnable call s:Enable(<f-args>)$/;"	c
SyntasticMake	vim/bundle/syntastic/plugin/syntastic.vim	/^function! SyntasticMake(options)$/;"	f
SyntasticStatuslineFlag	vim/bundle/syntastic/plugin/syntastic.vim	/^function! SyntasticStatuslineFlag()$/;"	f
SyntaxCheckers_c_GetLocList	vim/bundle/syntastic/syntax_checkers/c.vim	/^function! SyntaxCheckers_c_GetLocList()$/;"	f
SyntaxCheckers_coffee_GetLocList	vim/bundle/syntastic/syntax_checkers/coffee.vim	/^function! SyntaxCheckers_coffee_GetLocList()$/;"	f
SyntaxCheckers_cpp_GetLocList	vim/bundle/syntastic/syntax_checkers/cpp.vim	/^function! SyntaxCheckers_cpp_GetLocList()$/;"	f
SyntaxCheckers_css_GetLocList	vim/bundle/syntastic/syntax_checkers/css.vim	/^function! SyntaxCheckers_css_GetLocList()$/;"	f
SyntaxCheckers_cucumber_GetLocList	vim/bundle/syntastic/syntax_checkers/cucumber.vim	/^function! SyntaxCheckers_cucumber_GetLocList()$/;"	f
SyntaxCheckers_cuda_GetLocList	vim/bundle/syntastic/syntax_checkers/cuda.vim	/^function! SyntaxCheckers_cuda_GetLocList()$/;"	f
SyntaxCheckers_docbk_GetLocList	vim/bundle/syntastic/syntax_checkers/docbk.vim	/^function! SyntaxCheckers_docbk_GetLocList()$/;"	f
SyntaxCheckers_eruby_GetLocList	vim/bundle/syntastic/syntax_checkers/eruby.vim	/^function! SyntaxCheckers_eruby_GetLocList()$/;"	f
SyntaxCheckers_go_GetLocList	vim/bundle/syntastic/syntax_checkers/go.vim	/^function! SyntaxCheckers_go_GetLocList()$/;"	f
SyntaxCheckers_haml_GetLocList	vim/bundle/syntastic/syntax_checkers/haml.vim	/^function! SyntaxCheckers_haml_GetLocList()$/;"	f
SyntaxCheckers_haskell_GetLocList	vim/bundle/syntastic/syntax_checkers/haskell.vim	/^function! SyntaxCheckers_haskell_GetLocList()$/;"	f
SyntaxCheckers_html_GetLocList	vim/bundle/syntastic/syntax_checkers/html.vim	/^function! SyntaxCheckers_html_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	vim/bundle/syntastic/syntax_checkers/javascript.vim	/^    function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	vim/bundle/syntastic/syntax_checkers/javascript.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_less_GetLocList	vim/bundle/syntastic/syntax_checkers/less.vim	/^function! SyntaxCheckers_less_GetLocList()$/;"	f
SyntaxCheckers_lhaskell_GetLocList	vim/bundle/syntastic/syntax_checkers/haskell.vim	/^function! SyntaxCheckers_lhaskell_GetLocList()$/;"	f
SyntaxCheckers_lua_GetLocList	vim/bundle/syntastic/syntax_checkers/lua.vim	/^function! SyntaxCheckers_lua_GetLocList()$/;"	f
SyntaxCheckers_lua_Term	vim/bundle/syntastic/syntax_checkers/lua.vim	/^function! SyntaxCheckers_lua_Term(pos)$/;"	f
SyntaxCheckers_matlab_GetLocList	vim/bundle/syntastic/syntax_checkers/matlab.vim	/^function! SyntaxCheckers_matlab_GetLocList()$/;"	f
SyntaxCheckers_perl_GetLocList	vim/bundle/syntastic/syntax_checkers/perl.vim	/^function! SyntaxCheckers_perl_GetLocList()$/;"	f
SyntaxCheckers_php_GetLocList	vim/bundle/syntastic/syntax_checkers/php.vim	/^function! SyntaxCheckers_php_GetLocList()$/;"	f
SyntaxCheckers_php_Term	vim/bundle/syntastic/syntax_checkers/php.vim	/^function! SyntaxCheckers_php_Term(item)$/;"	f
SyntaxCheckers_puppet_GetLocList	vim/bundle/syntastic/syntax_checkers/puppet.vim	/^function! SyntaxCheckers_puppet_GetLocList()$/;"	f
SyntaxCheckers_python_GetLocList	vim/bundle/syntastic/syntax_checkers/python.vim	/^function! SyntaxCheckers_python_GetLocList()$/;"	f
SyntaxCheckers_python_Term	vim/bundle/syntastic/syntax_checkers/python.vim	/^function! SyntaxCheckers_python_Term(i)$/;"	f
SyntaxCheckers_ruby_GetLocList	vim/bundle/syntastic/syntax_checkers/ruby.vim	/^function! SyntaxCheckers_ruby_GetLocList()$/;"	f
SyntaxCheckers_sass_GetLocList	vim/bundle/syntastic/syntax_checkers/sass.vim	/^function! SyntaxCheckers_sass_GetLocList()$/;"	f
SyntaxCheckers_sh_GetLocList	vim/bundle/syntastic/syntax_checkers/sh.vim	/^function! SyntaxCheckers_sh_GetLocList()$/;"	f
SyntaxCheckers_tcl_GetLocList	vim/bundle/syntastic/syntax_checkers/tcl.vim	/^function! SyntaxCheckers_tcl_GetLocList()$/;"	f
SyntaxCheckers_tex_GetLocList	vim/bundle/syntastic/syntax_checkers/tex.vim	/^function! SyntaxCheckers_tex_GetLocList()$/;"	f
SyntaxCheckers_xhtml_GetLocList	vim/bundle/syntastic/syntax_checkers/xhtml.vim	/^function! SyntaxCheckers_xhtml_GetLocList()$/;"	f
SyntaxName	vim/bundle/vim-coffee-script/indent/coffee.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
TARGET	vim/bundle/Command-T/ruby/command-t/Makefile	/^TARGET = ext$/;"	m
TARGETS_ARCHIVED	vim/bundle/vim-textobj-user/Makefile	/^TARGETS_ARCHIVED = $(all_files_in_repos) mduem\/Makefile$/;"	m
TARGETS_STATIC	vim/bundle/vim-textobj-user/Makefile	/^TARGETS_STATIC = $(filter %.vim %.txt,$(all_files_in_repos))$/;"	m
TARGET_SO	vim/bundle/Command-T/ruby/command-t/Makefile	/^TARGET_SO     = $(DLLIB)$/;"	m
TabSpace	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagList_IsValid	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	vim/bundle/taglist.vim/plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TextObject	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>TextObject(inner, incbelow, vis, range, count)$/;"	f
TheCWord	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:TheCWord()$/;"	f
TheCWord	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:TheCWord()$/;"	f
TidyEncOptByFenc	vim/bundle/syntastic/syntax_checkers/html.vim	/^function! s:TidyEncOptByFenc()$/;"	f
TidyEncOptByFenc	vim/bundle/syntastic/syntax_checkers/xhtml.vim	/^function! s:TidyEncOptByFenc()$/;"	f
Tlist	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	vim/bundle/taglist.vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	vim/bundle/taglist.vim/plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
TogBG	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^function! s:TogBG()$/;"	f
ToggleAutoClose	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^function! s:ToggleAutoClose()$/;"	f
ToggleBG	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^    command ToggleBG :call s:TogBG()$/;"	c
ToggleBackground	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^function! ToggleBackground()$/;"	f
ToolBar.togglebg	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>a$/;"	m
ToolBar.togglebg	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> ToolBar.togglebg <SID>TogBG$/;"	m
ToolBar.togglebg	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>gv$/;"	m
Touch	vim/functions.vim	/^function Touch(file)$/;"	f
Transform	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Transform(algorithm,type)$/;"	f
TransformOpfunc	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformOpfunc(type)$/;"	f
TransformSetup	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm)$/;"	f
TreeDirNode.AbsoluteTreeRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
TryToOpen	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:TryToOpen()$/;"	f
U	vim/bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> U     :<C-U>call <SID>wrap('U',v:count)<CR>$/;"	m
U	vim/bundle/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> U     :<C-U>call <SID>wrap('U',v:count)<CR>$/;"	m
UnEsc	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UntabbedCol	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateErrors	vim/bundle/syntastic/plugin/syntastic.vim	/^function! s:UpdateErrors()$/;"	f
UpdateNERDTree	vim/functions.vim	/^function s:UpdateNERDTree(...)$/;"	f
UpdatePlaceholderTabStops	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
UrlDecode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:UrlDecode(str)$/;"	f
UrlEncode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:UrlEncode(str)$/;"	f
VERSION	vim/bundle/vim-rspec/Makefile	/^VERSION = `git tag | sort -r| head -n1`$/;"	m
VIM	vim/bundle/Command-T/ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/Command-T/ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/Command-T/ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/Command-T/spec/command-t/finder/buffer_finder_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/Command-T/spec/command-t/finder/file_finder_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/Command-T/spec/command-t/scanner/buffer_scanner_spec.rb	/^module VIM$/;"	m
VIM	vim/bundle/Command-T/spec/command-t/scanner/file_scanner_spec.rb	/^module VIM; end$/;"	m
VPATH	vim/bundle/Command-T/ruby/command-t/Makefile	/^VPATH = $(srcdir):$(topdir):$(hdrdir)$/;"	m
VimFormatter	vim/bundle/Command-T/spec/vim_formatter.rb	/^      class VimFormatter < BaseTextFormatter$/;"	c	class:Spec.Runner.Formatter
Warnings	vim/bundle/syntastic/plugin/syntastic.vim	/^function s:Warnings()$/;"	f
Wholematch	vim/bundle/matchit.zip/plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
WideMsg	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:WideMsg(msg)$/;"	f
WillComplete	vim/bundle/supertab/plugin/supertab.vim	/^function! s:WillComplete()$/;"	f
Window	vim/bundle/Command-T/ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
Window.Toggle\	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>a$/;"	m
Window.Toggle\	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> Window.Toggle\\ Background <SID>TogBG$/;"	m
Window.Toggle\	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>gv$/;"	m
Wq	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Wq(force,...) abort$/;"	f
Write	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
XmlDecode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:XmlDecode(str)$/;"	f
XmlEncode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:XmlEncode(str)$/;"	f
XmlEntityDecode	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:XmlEntityDecode(str)$/;"	f
ZoomWin	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^com! ZoomWin :set lz|silent call ZoomWin#ZoomWin()|set nolz$/;"	c
ZoomWin	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^fun! ZoomWin()$/;"	f
ZoomWin#CleanupSessionFile	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! ZoomWin#CleanupSessionFile()$/;"	f
ZoomWin#ZoomWin	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! ZoomWin#ZoomWin()$/;"	f
ZoomWin.vim	vim/bundle/ZoomWin/autoload/ZoomWin.vim	1;"	F
ZoomWinPlugin.vim	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	1;"	F
ZoomWinPreserve	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^fun! s:ZoomWinPreserve(open)$/;"	f
[%	vim/bundle/matchit.zip/plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	vim/bundle/matchit.zip/plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	vim/bundle/matchit.zip/plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
[<Space>	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap [<Space> <Plug>unimpairedBlankUp$/;"	m
[e	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap [e <Plug>unimpairedMoveUp$/;"	m
[o	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap [o <Plug>unimpairedOPrevious$/;"	m
]%	vim/bundle/matchit.zip/plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	vim/bundle/matchit.zip/plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	vim/bundle/matchit.zip/plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
]<Space>	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]<Space> <Plug>unimpairedBlankDown$/;"	m
]e	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]e <Plug>unimpairedMoveDown$/;"	m
]o	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]o <Plug>unimpairedONext$/;"	m
_killall	zsh/completions.zsh	/^function _killall () {$/;"	f
_map	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:_map(map_commands, forced_p, lhs, rhs)$/;"	f
_rake	zsh/completions.zsh	/^function _rake () {$/;"	f
_rake_does_task_list_need_generating	zsh/completions.zsh	/^function _rake_does_task_list_need_generating () {$/;"	f
a%	vim/bundle/matchit.zip/plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
aI	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
aI	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
abbrev_len	vim/bundle/Command-T/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:
abbrev_p	vim/bundle/Command-T/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:
abbrev_segments	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abbreviate_from_dict	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:abbreviate_from_dict(cmd,dict)$/;"	f
abolish.vim	vim/bundle/vim-abolish/plugin/abolish.vim	1;"	F
abolish_l	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_l	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_setup	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
abolish_t	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
accept_selection	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
ack.vim	vim/bundle/ack.vim/plugin/ack.vim	1;"	F
activateNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add!	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_methods	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_methods	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_methods	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_paths_for_directory	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.FileScanner
addfilecmds	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addfilecmds	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
addtostatus	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
adjust_format_for_istar	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^def adjust_format_for_istar$/;"	f
ai	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
ai	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
all_specs.sh	bin/all_specs.sh	1;"	F
all_specs_parallel.sh	bin/all_specs_parallel.sh	1;"	F
allsteps	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! s:allsteps()$/;"	f
always_show_dot_files	vim/bundle/Command-T/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:
app_background_script_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_background_script_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_dbext_settings	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_default_locale	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_destroy_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_environments	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_eval	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_execute_script_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_file	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_find_file	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generate_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_generators	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_has_file	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_lightweight_ruby_eval	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_migration	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_named_route_file	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_path	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_rake_tasks	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_relglob	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_route_names	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_ruby_shell_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_runner_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_script_shell_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_server_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_source_callback	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_tags_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_test_suites	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_assertions	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
app_user_classes	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
arch	vim/bundle/Command-T/ruby/command-t/Makefile	/^arch = x86_64-linux$/;"	m
archdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^archdir = $(rubylibdir)\/$(arch)$/;"	m
archflag	vim/bundle/Command-T/ruby/command-t/Makefile	/^archflag = $/;"	m
autocamelize	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autocamelize	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoclose.vim	vim/bundle/vim-autoclose/plugin/autoclose.vim	1;"	F
autoload	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:autoload(...)$/;"	f
autoload	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:autoload(...)$/;"	f
autospec	vim/bundle/Command-T/bin/autospec	1;"	F
autotag	vim/plugin/autotag.vim	/^augroup autotag$/;"	a
autotag.vim	vim/plugin/autotag.vim	1;"	F
b:cucumber_root	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:current_syntax	vim/bundle/vim-coffee-script/syntax/coffee.vim	/^let b:current_syntax = "coffee"$/;"	v
b:current_syntax	vim/bundle/vim-coffee-script/syntax/eco.vim	/^  let b:current_syntax = "eco"$/;"	v
b:current_syntax	vim/bundle/vim-coffee-script/syntax/eco.vim	/^let b:current_syntax = 'eco'$/;"	v
b:current_syntax	vim/bundle/vim-cucumber/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	vim/bundle/vim-git/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	vim/bundle/vim-git/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	vim/bundle/vim-git/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	vim/bundle/vim-git/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	vim/bundle/vim-git/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	vim/bundle/vim-javascript/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:did_ftplugin	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/bundle/vim-git/ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/bundle/vim-git/ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/bundle/vim-cucumber/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/bundle/vim-git/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/bundle/vim-javascript/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_jslint_plugin	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let b:did_jslint_plugin = 1$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = b:current_syntax$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = g:eco_default_subtype$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'html'$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'javascript'$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'ruby'$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'text'$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'yaml'$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eco\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eco_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^  let b:eco_subtype = matchstr(s:lines,'eco_subtype=\\zs\\w\\+')$/;"	v
b:git_dir	vim/bundle/vim-git/ftplugin/git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	vim/bundle/vim-git/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	vim/bundle/vim-git/ftplugin/git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
b:javascript_fold	vim/bundle/vim-javascript/syntax/javascript.vim	/^let b:javascript_fold='true'$/;"	v
b:showing_message	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let b:showing_message = 0$/;"	v
b:undo_ftplugin	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^  let b:undo_ftplugin .= "| sil! nunmap <buffer> <C-]>| sil! nunmap <buffer> <C-W>]| sil! nunmap <buffer> <C-W><C-]>| sil! nunmap <buffer> <C-W>}"$/;"	v
b:undo_ftplugin	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^    let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . "|setl tw<"$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|nunmap <buffer> K"$/;"	v
b:undo_ftplugin	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo<"$/;"	v
b:undo_indent	vim/bundle/vim-cucumber/indent/cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	vim/bundle/vim-git/indent/gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
backspace	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
badgood	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:badgood(args)$/;"	f
beep	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bindir	vim/bundle/Command-T/ruby/command-t/Makefile	/^bindir = $(exec_prefix)\/bin$/;"	m
bookmarkNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bsub	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
bufInWindows	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer	vim/bundle/Command-T/spec/command-t/scanner/buffer_scanner_spec.rb	/^  def buffer name$/;"	f
buffer	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer_app	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_app	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_commit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_finder.rb	vim/bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	1;"	F
buffer_finder_spec.rb	vim/bundle/Command-T/spec/command-t/finder/buffer_finder_spec.rb	1;"	F
buffer_getline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getline	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_getvar	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_getvar	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_lines	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_name	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_number	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_path	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_path	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_repo	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_scanner.rb	vim/bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	1;"	F
buffer_scanner_spec.rb	vim/bundle/Command-T/spec/command-t/scanner/buffer_scanner_spec.rb	1;"	F
buffer_setvar	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_setvar	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_setvar	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_sha1	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_spec	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^  function! s:buffer_spec() dict abort$/;"	f
buffer_type	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buffer_type_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
buffer_type_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
build_quietly	vim/bundle/Command-T/multi-spec.sh	/^function build_quietly()$/;"	f
bundle.path	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:bundle.path()$/;"	f
bundle.rtpath	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:bundle.rtpath()$/;"	f
c	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:c()$/;"	f
c.vim	vim/bundle/syntastic/syntax_checkers/c.vim	1;"	F
cCommandTMatch	vim/bundle/Command-T/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	vim/bundle/Command-T/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cache_clear	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_clear	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_get	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_has	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_needs	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
cache_set	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
camelcase	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:camelcase(word)$/;"	f
cancel	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
cancel_selection	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:cancel_selection(previous_mode, orig_pos)$/;"	f
cecutil.vim	vim/bundle/vim-align/plugin/cecutil.vim	1;"	F
centerView	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
cfiles	vim/bundle/Command-T/Makefile	/^cfiles      := $(shell find ruby -name '*.c')$/;"	m
chCwd	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changesurround	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
cheaders	vim/bundle/Command-T/Makefile	/^cheaders    := $(shell find ruby -name '*.h')$/;"	m
checkForActivate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
check_ruby_1_9_2	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^  def check_ruby_1_9_2$/;"	f
choose	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^function! s:choose(word)$/;"	f
clear	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear!	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
close	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
coerce	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:coerce(transformation)$/;"	f
coffee.vim	vim/bundle/syntastic/syntax_checkers/coffee.vim	1;"	F
coffee.vim	vim/bundle/vim-coffee-script/ftdetect/coffee.vim	1;"	F
coffee.vim	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	1;"	F
coffee.vim	vim/bundle/vim-coffee-script/indent/coffee.vim	1;"	F
coffee.vim	vim/bundle/vim-coffee-script/syntax/coffee.vim	1;"	F
coffee_make_options	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^  let coffee_make_options = ""$/;"	v
colors_name	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
command	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
command-t.vim	vim/bundle/Command-T/plugin/command-t.vim	1;"	F
commands.abbrev.process	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:commands.abbrev.process(bang,line1,line2,count,args)$/;"	f
commands.abstract.dispatch	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.dispatch(bang,line1,line2,count,args)$/;"	f
commands.abstract.go	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.go(bang,line1,line2,count,args)$/;"	f
commands.search.process	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:commands.search.process(bang,line1,line2,count,args)$/;"	f
commands.substitute.process	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:commands.substitute.process(bang,line1,line2,count,args)$/;"	f
comp_alpha	vim/bundle/Command-T/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f
comp_score	vim/bundle/Command-T/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f
compact	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compact	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compatibility_check	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:compatibility_check()$/;"	f
compile-test.sh	vim/bundle/Command-T/compile-test.sh	1;"	F
completeBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
completion_filter	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
completions.zsh	zsh/completions.zsh	1;"	F
config.vim	vim/bundle/vundle/autoload/vundle/config.vim	1;"	F
controller	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controller	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controller.rb	vim/bundle/Command-T/ruby/command-t/controller.rb	1;"	F
controllerEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
controllerList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
controller_spec.rb	vim/bundle/Command-T/spec/command-t/controller_spec.rb	1;"	F
cpp.vim	vim/bundle/syntastic/syntax_checkers/cpp.vim	1;"	F
cr	vim/bundle/supertab/plugin/supertab.vim	/^      let cr = (map =~? '\\(^\\|[^)]\\)<cr>')$/;"	v
cr	vim/bundle/vim-abolish/plugin/abolish.vim	/^nmap cr  <Plug>Coerce$/;"	m
createTreeWin	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
create_dictionary	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:create_dictionary(lhs,rhs,opts)$/;"	f
crend	vim/bundle/vim-endwise/plugin/endwise.vim	/^function! s:crend(always)$/;"	f
cs	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      cs   <Plug>Csurround$/;"	m
css.vim	vim/bundle/syntastic/syntax_checkers/css.vim	1;"	F
ctrl_n	vim/bundle/supertab/plugin/supertab.vim	/^    let ctrl_n = substitute(ctrl_n, '<', '<lt>', 'g')$/;"	v
ctrl_n	vim/bundle/supertab/plugin/supertab.vim	/^  let ctrl_n = maparg('<c-n>', 'i')$/;"	v
ctrl_p	vim/bundle/supertab/plugin/supertab.vim	/^    let ctrl_p = substitute(ctrl_p, '<', '<lt>', 'g')$/;"	v
ctrl_p	vim/bundle/supertab/plugin/supertab.vim	/^  let ctrl_p = maparg('<c-p>', 'i')$/;"	v
cucumber.vim	vim/bundle/syntastic/syntax_checkers/cucumber.vim	1;"	F
cucumber.vim	vim/bundle/vim-cucumber/compiler/cucumber.vim	1;"	F
cucumber.vim	vim/bundle/vim-cucumber/ftdetect/cucumber.vim	1;"	F
cucumber.vim	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	1;"	F
cucumber.vim	vim/bundle/vim-cucumber/indent/cucumber.vim	1;"	F
cucumber.vim	vim/bundle/vim-cucumber/syntax/cucumber.vim	1;"	F
cuda.vim	vim/bundle/syntastic/syntax_checkers/cuda.vim	1;"	F
current_compiler	vim/bundle/vim-cucumber/compiler/cucumber.vim	/^let current_compiler = "cucumber"$/;"	v
cursor_end	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
cycle	vim/bundle/vim-git/ftplugin/gitrebase.vim	/^function! s:cycle()$/;"	f
dashcase	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:dashcase(word)$/;"	f
datadir	vim/bundle/Command-T/ruby/command-t/Makefile	/^datadir = $(datarootdir)$/;"	m
datarootdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
dd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dd dd:JSLintUpdate<CR>$/;"	m
debug	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:debug(str)$/;"	f
debug	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:debug(str)$/;"	f
default_open_command	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
define_commands	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:define_commands()$/;"	f
delete	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
depends	vim/bundle/Command-T/Makefile	/^depends     := $(shell find ruby -name depend)$/;"	m
did_javascript_syn_inits	vim/bundle/vim-javascript/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
diff_off_all	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_off_all(dir)$/;"	f
diff_window_count	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_window_count()$/;"	f
diffcomplete	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
dispatcher	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:dispatcher(bang,line1,line2,count,args)$/;"	f
display	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! s:display(headers, results)$/;"	f
displayHelp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dispose	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
djump	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:djump(def)$/;"	f
djump	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:djump(def)$/;"	f
dldflags	vim/bundle/Command-T/ruby/command-t/Makefile	/^dldflags = $/;"	m
docbk.vim	vim/bundle/syntastic/syntax_checkers/docbk.vim	1;"	F
docdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^docdir = $(datarootdir)\/doc\/$(PACKAGE)$/;"	m
dosurround	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_file	vim/bundle/Command-T/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:
ds	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      ds   <Plug>Dsurround$/;"	m
dumpHelp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dump_failure	vim/bundle/Command-T/spec/vim_formatter.rb	/^        def dump_failure counter, failure$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_pending	vim/bundle/Command-T/spec/vim_formatter.rb	/^        def dump_pending; end$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_summary	vim/bundle/Command-T/spec/vim_formatter.rb	/^        def dump_summary duration, example_count, failure_count, pending_count$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dvidir	vim/bundle/Command-T/ruby/command-t/Makefile	/^dvidir = $(docdir)$/;"	m
dw	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dw dw:JSLintUpdate<CR>$/;"	m
echo	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
eco.vim	vim/bundle/vim-coffee-script/ftdetect/eco.vim	1;"	F
eco.vim	vim/bundle/vim-coffee-script/syntax/eco.vim	1;"	F
edit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
edit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
editcmdfor	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
egrep_pattern	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:egrep_pattern(dict,boundaries)$/;"	f
endof	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
endof	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
endwise.vim	vim/bundle/vim-endwise/plugin/endwise.vim	1;"	F
ensure_appropriate_window_selection	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
entries	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:entries(path)$/;"	f
environment	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:environment()$/;"	f
environment	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
environmentList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:error(str)$/;"	f
error	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:error(str)$/;"	f
error	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:error(str)$/;"	f
error	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:error(str)$/;"	f
error_msg	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:error_msg(msg)$/;"	f
eruby.vim	vim/bundle/syntastic/syntax_checkers/eruby.vim	1;"	F
escape_for_single_quotes	vim/bundle/Command-T/ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escarg	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
escarg	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
esccmd	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:escvar(r)$/;"	f
escvar	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:escvar(r)$/;"	f
examples.rb	vim/bundle/vim-textobj-rubyblock/test/examples.rb	1;"	F
exec	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
exec_menuitem.vim	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	1;"	F
exec_prefix	vim/bundle/Command-T/ruby/command-t/Makefile	/^exec_prefix = $(prefix)$/;"	m
exists?	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
expand_braces	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:expand_braces(dict)$/;"	f
expand_path	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:expand_path(path) abort$/;"	f
ext.c	vim/bundle/Command-T/ruby/command-t/ext.c	1;"	F
ext.h	vim/bundle/Command-T/ruby/command-t/ext.h	1;"	F
extconf.rb	vim/bundle/Command-T/ruby/command-t/extconf.rb	1;"	F
extout	vim/bundle/Command-T/ruby/command-t/Makefile	/^extout = $/;"	m
extout_prefix	vim/bundle/Command-T/ruby/command-t/Makefile	/^extout_prefix = $/;"	m
extractafter	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
extractdbvar	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
extractopts	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:extractopts(list,opts)$/;"	f
fetch	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:fetch(varname, default)$/;"	f
fetch_scripts	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! s:fetch_scripts(to)$/;"	f
file_finder.rb	vim/bundle/Command-T/ruby/command-t/finder/file_finder.rb	1;"	F
file_finder_spec.rb	vim/bundle/Command-T/spec/command-t/finder/file_finder_spec.rb	1;"	F
file_getline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_getline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_lines	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
file_path	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
file_scanner.rb	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	1;"	F
file_scanner_spec.rb	vim/bundle/Command-T/spec/command-t/scanner/file_scanner_spec.rb	1;"	F
fileinput	vim/plugin/autotag.vim	/^import fileinput$/;"	m
find	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findAndRevealPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
find_command	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:find_command(cmd,flags,word)$/;"	f
find_grep	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:find_grep()$/;"	f
find_hpricot	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:find_hpricot()$/;"	f
find_xslt	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:find_xslt()$/;"	f
findamethod	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findamethod	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findasymbol	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findcmdfor	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findedit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
finder.rb	vim/bundle/Command-T/ruby/command-t/finder.rb	1;"	F
findfromview	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findfromview	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findlayout	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:findview(name)$/;"	f
findview	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:findview(name)$/;"	f
firstUsableWindow	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
fixturesList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
flush	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	vim/bundle/Command-T/ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def flush$/;"	f	class:CommandT.FileScanner
flush	vim/bundle/Command-T/ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
fnameescape	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
focus	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
format	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:format(...)$/;"	f
format	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:format(...)$/;"	f
fs_menu.vim	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	1;"	F
fugitive	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#reload_status	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#statusline	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#statusline(...)$/;"	f
fugitive.vim	vim/bundle/vim-fugitive/plugin/fugitive.vim	1;"	F
fugitive_blame	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_remove	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_utility	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_utility$/;"	a
function	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:function(name)$/;"	f
function	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:function(name)$/;"	f
function	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:function(name)$/;"	f
function	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
function	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:function(name)$/;"	f
function	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
functionaltestList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
functions.vim	vim/functions.vim	1;"	F
fuzzyglob	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
fuzzyglob	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	vim/bundle/matchit.zip/plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	vim/bundle/matchit.zip/plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	vim/bundle/matchit.zip/plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:Align_xstrlen	vim/bundle/vim-align/autoload/Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	vim/bundle/vim-align/autoload/Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:DrChipTopLvlMenu	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:JSLintHighlightErrorLine	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let g:JSLintHighlightErrorLine = 1$/;"	v
g:NERDCustomDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let g:NERDCustomDelimiters = {}$/;"	v
g:NERDTreeBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:SuperTabCompletionContexts	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabCrMapping	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['\\s']$/;"	v
g:SuperTabNoCompleteAfter	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:abolish_save_file	vim/bundle/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("<sfile>:h:h")."\/after\/plugin\/abolish.vim"$/;"	v
g:abolish_save_file	vim/bundle/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/.vim\/after\/plugin\/abolish.vim")$/;"	v
g:abolish_save_file	vim/bundle/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/vimfiles\/after\/plugin\/abolish.vim")$/;"	v
g:ackprg	vim/bundle/ack.vim/plugin/ack.vim	/^	let g:ackprg="ack -H --nocolor --nogroup --column"$/;"	v
g:autoloaded_rails	vim/bundle/rails.vim/autoload/rails.vim	/^let g:autoloaded_rails = '4.3'$/;"	v
g:autoloaded_rails	vim/bundle/vim-rails/autoload/rails.vim	/^let g:autoloaded_rails = '4.3'$/;"	v
g:autotagCtagsCmd	vim/plugin/autotag.vim	/^   let g:autotagCtagsCmd="ctags"$/;"	v
g:autotagDisabled	vim/plugin/autotag.vim	/^   let g:autotagDisabled=0$/;"	v
g:autotagExcludeSuffixes	vim/plugin/autotag.vim	/^   let g:autotagExcludeSuffixes="tml.xml.text.txt"$/;"	v
g:autotagTagsFile	vim/plugin/autotag.vim	/^   let g:autotagTagsFile="tags"$/;"	v
g:autotagVerbosityLevel	vim/plugin/autotag.vim	/^   let g:autotagVerbosityLevel=0$/;"	v
g:autotag_vim_version_sourced	vim/plugin/autotag.vim	/^let g:autotag_vim_version_sourced=s:autotag_vim_version$/;"	v
g:command_t_loaded	vim/bundle/Command-T/plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:cucumber_languages	vim/bundle/vim-cucumber/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:did_ft	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:eco_default_subtype	vim/bundle/vim-coffee-script/syntax/eco.vim	/^  let g:eco_default_subtype = "html"$/;"	v
g:fugitive_git_executable	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:loaded_Align	vim/bundle/vim-align/autoload/Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	vim/bundle/vim-align/autoload/AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_AutoClose	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^let g:loaded_AutoClose = 1$/;"	v
g:loaded_ZoomWin	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^let g:loaded_ZoomWin = "v23"$/;"	v
g:loaded_ZoomWinPlugin	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^let g:loaded_ZoomWinPlugin = "v23"$/;"	v
g:loaded_abolish	vim/bundle/vim-abolish/plugin/abolish.vim	/^let g:loaded_abolish = 1$/;"	v
g:loaded_cecutil	vim/bundle/vim-align/plugin/cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_endwise	vim/bundle/vim-endwise/plugin/endwise.vim	/^let g:loaded_endwise = 1$/;"	v
g:loaded_fugitive	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_rails	vim/bundle/rails.vim/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_rails	vim/bundle/vim-rails/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_repeat	vim/bundle/repeat.vim/plugin/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_repeat	vim/bundle/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_surround	vim/bundle/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_plugin	vim/bundle/syntastic/plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:loaded_textobj_rubyblock	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let g:loaded_textobj_rubyblock = 1$/;"	v
g:loaded_togglebg	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^let g:loaded_togglebg = 1$/;"	v
g:loaded_unimpaired	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:repeat_tick	vim/bundle/repeat.vim/plugin/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:repeat_tick	vim/bundle/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:syntastic_auto_loc_list	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_auto_loc_list = 0$/;"	v
g:syntastic_disabled_filetypes	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_disabled_filetypes = []$/;"	v
g:syntastic_enable_balloons	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_balloons = 0$/;"	v
g:syntastic_enable_signs	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_signs = 0$/;"	v
g:syntastic_jsl_conf	vim/bundle/syntastic/syntax_checkers/javascript.vim	/^        let g:syntastic_jsl_conf = ""$/;"	v
g:syntastic_nvcc_binary	vim/bundle/syntastic/syntax_checkers/cuda.vim	/^	let g:syntastic_nvcc_binary = '\/usr\/local\/cuda\/bin\/nvcc'$/;"	v
g:syntastic_perl_efm_program	vim/bundle/syntastic/syntax_checkers/perl.vim	/^    let g:syntastic_perl_efm_program = $VIMRUNTIME.'\/tools\/efm_perl.pl -c'$/;"	v
g:syntastic_quiet_warnings	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_quiet_warnings = 0$/;"	v
g:syntastic_sass_imports	vim/bundle/syntastic/syntax_checkers/sass.vim	/^let g:syntastic_sass_imports = 0$/;"	v
g:syntastic_stl_format	vim/bundle/syntastic/plugin/syntastic.vim	/^    let g:syntastic_stl_format = '[Syntax: line:%F (%t)]'$/;"	v
g:unimpaired_html_entities	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
gS	vim/bundle/vim-surround/plugin/surround.vim	/^    vmap    gS   <Plug>VgSurround$/;"	m
getPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_bool	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_cursor_highlight	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_list_or_string	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_number	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_string	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
getchar	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
getopt	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getopt	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getpidfor	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
getpidfor	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
git.vim	vim/bundle/vim-git/ftdetect/git.vim	1;"	F
git.vim	vim/bundle/vim-git/ftplugin/git.vim	1;"	F
git.vim	vim/bundle/vim-git/syntax/git.vim	1;"	F
gitcommit.vim	vim/bundle/vim-git/ftplugin/gitcommit.vim	1;"	F
gitcommit.vim	vim/bundle/vim-git/syntax/gitcommit.vim	1;"	F
gitconfig.vim	vim/bundle/vim-git/ftplugin/gitconfig.vim	1;"	F
gitconfig.vim	vim/bundle/vim-git/indent/gitconfig.vim	1;"	F
gitconfig.vim	vim/bundle/vim-git/syntax/gitconfig.vim	1;"	F
gitdiffcached	vim/bundle/vim-git/ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
github_url	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:github_url(repo,url,rev,commit,path,type,line1,line2) abort$/;"	f
gitrebase.vim	vim/bundle/vim-git/ftplugin/gitrebase.vim	1;"	F
gitrebase.vim	vim/bundle/vim-git/syntax/gitrebase.vim	1;"	F
gitsendemail.vim	vim/bundle/vim-git/ftplugin/gitsendemail.vim	1;"	F
gitsendemail.vim	vim/bundle/vim-git/syntax/gitsendemail.vim	1;"	F
go.vim	vim/bundle/syntastic/syntax_checkers/go.vim	1;"	F
gpos_to_spos	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:gpos_to_spos(gpos)$/;"	f
grep_command	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:grep_command(args,bang,flags,word)$/;"	f
gsub	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gsub	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
haml.vim	vim/bundle/syntastic/syntax_checkers/haml.vim	1;"	F
handleMiddleMouse	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_key	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
has_doc	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:has_doc(rtp) abort$/;"	f
has_syntax	vim/bundle/Command-T/ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
haskell.vim	vim/bundle/syntastic/syntax_checkers/haskell.vim	1;"	F
hdrdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^hdrdir = $(topdir)$/;"	m
hello	vim/bundle/vim-textobj-rubyblock/test/examples.rb	/^def hello$/;"	f
helperEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helperList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
helpermethods	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
helptags	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:helptags(rtp) abort$/;"	f
hide	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
hs_highlight_boolean	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
html.vim	vim/bundle/syntastic/syntax_checkers/html.vim	1;"	F
html_snip_helper.vim	vim/bundle/snipmate.vim/ftplugin/html_snip_helper.vim	1;"	F
htmldiff	vim/bundle/Command-T/bin/htmldiff	1;"	F
htmldir	vim/bundle/Command-T/ruby/command-t/Makefile	/^htmldir = $(docdir)$/;"	m
iI	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
iI	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
ii	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 0, [line("."), line("."), col("."), col(".")])<CR>$/;"	m
ii	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 1, [line("'<"), line("'>"), col("'<"), col("'>")])<CR><Esc>gv$/;"	m
includedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^includedir = $(prefix)\/include$/;"	m
indent-object.vim	vim/bundle/vim-indent-object/plugin/indent-object.vim	1;"	F
indentLevelFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
infodir	vim/bundle/Command-T/ruby/command-t/Makefile	/^infodir = $(prefix)\/share\/info$/;"	m
initNerdTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initOpenURL	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	vim/bundle/Command-T/ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	vim/bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^    def initialize$/;"	f	class:CommandT.BufferFinder
initialize	vim/bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileFinder
initialize	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileScanner
initialize	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initializerEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
initializerList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
install	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:install(bang, bundles) abort$/;"	f
install.sh	install.sh	1;"	F
installer.vim	vim/bundle/vundle/autoload/vundle/installer.vim	1;"	F
instaweb_url	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:instaweb_url(repo,rev,commit,path,type,...) abort$/;"	f
integrationtestEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
integrationtestList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
invertrange	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
invertrange	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isTreeOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
javascript.vim	vim/bundle/syntastic/syntax_checkers/javascript.vim	1;"	F
javascript.vim	vim/bundle/vim-javascript/ftdetect/javascript.vim	1;"	F
javascript.vim	vim/bundle/vim-javascript/indent/javascript.vim	1;"	F
javascript.vim	vim/bundle/vim-javascript/syntax/javascript.vim	1;"	F
javascriptEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
javascriptList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jslint	vim/bundle/jslint.vim/bin/jslint	1;"	F
jslint-core.js	vim/bundle/jslint.vim/ftplugin/javascript/jslint/jslint-core.js	1;"	F
jslint.vim	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	1;"	F
jump	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! s:jump(command,count)$/;"	f
jumpToChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
lastformat	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastformat	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethod	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastmethodline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
lastopeningline	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
layoutList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
ldflags	vim/bundle/Command-T/ruby/command-t/Makefile	/^ldflags  = -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic$/;"	m
ldiff	vim/bundle/Command-T/bin/ldiff	1;"	F
leave	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
less.vim	vim/bundle/syntastic/syntax_checkers/less.vim	1;"	F
libEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
libList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
libdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^libdir = $(exec_prefix)\/lib$/;"	m
libexecdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^libexecdir = $(prefix)\/lib\/ruby1.8$/;"	m
libpath	vim/bundle/Command-T/ruby/command-t/Makefile	/^libpath = . $(libdir)$/;"	m
linepeak	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:linepeak()$/;"	f
linepeak	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:linepeak()$/;"	f
lines	vim/bundle/Command-T/ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
list_matches	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
load_scripts	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! s:load_scripts(bang)$/;"	f
loaded_c_syntax_checker	vim/bundle/syntastic/syntax_checkers/c.vim	/^let loaded_c_syntax_checker = 1$/;"	v
loaded_coffee_syntax_checker	vim/bundle/syntastic/syntax_checkers/coffee.vim	/^let loaded_coffee_syntax_checker = 1$/;"	v
loaded_cpp_syntax_checker	vim/bundle/syntastic/syntax_checkers/cpp.vim	/^let loaded_cpp_syntax_checker = 1$/;"	v
loaded_css_syntax_checker	vim/bundle/syntastic/syntax_checkers/css.vim	/^let loaded_css_syntax_checker = 1$/;"	v
loaded_cucumber_syntax_checker	vim/bundle/syntastic/syntax_checkers/cucumber.vim	/^let loaded_cucumber_syntax_checker = 1$/;"	v
loaded_cuda_syntax_checker	vim/bundle/syntastic/syntax_checkers/cuda.vim	/^let loaded_cuda_syntax_checker = 1$/;"	v
loaded_docbk_syntax_checker	vim/bundle/syntastic/syntax_checkers/docbk.vim	/^let loaded_docbk_syntax_checker = 1$/;"	v
loaded_eruby_syntax_checker	vim/bundle/syntastic/syntax_checkers/eruby.vim	/^let loaded_eruby_syntax_checker = 1$/;"	v
loaded_go_syntax_checker	vim/bundle/syntastic/syntax_checkers/go.vim	/^let loaded_go_syntax_checker = 1$/;"	v
loaded_haml_syntax_checker	vim/bundle/syntastic/syntax_checkers/haml.vim	/^let loaded_haml_syntax_checker = 1$/;"	v
loaded_haskell_syntax_checker	vim/bundle/syntastic/syntax_checkers/haskell.vim	/^let loaded_haskell_syntax_checker = 1$/;"	v
loaded_html_syntax_checker	vim/bundle/syntastic/syntax_checkers/html.vim	/^let loaded_html_syntax_checker = 1$/;"	v
loaded_javascript_syntax_checker	vim/bundle/syntastic/syntax_checkers/javascript.vim	/^let loaded_javascript_syntax_checker = 1$/;"	v
loaded_less_syntax_checker	vim/bundle/syntastic/syntax_checkers/less.vim	/^let loaded_less_syntax_checker = 1$/;"	v
loaded_lua_syntax_checker	vim/bundle/syntastic/syntax_checkers/lua.vim	/^let loaded_lua_syntax_checker = 1$/;"	v
loaded_matchit	vim/bundle/matchit.zip/plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_matlab_syntax_checker	vim/bundle/syntastic/syntax_checkers/matlab.vim	/^let loaded_matlab_syntax_checker = 1$/;"	v
loaded_nerd_comments	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_perl_syntax_checker	vim/bundle/syntastic/syntax_checkers/perl.vim	/^let loaded_perl_syntax_checker = 1$/;"	v
loaded_php_syntax_checker	vim/bundle/syntastic/syntax_checkers/php.vim	/^let loaded_php_syntax_checker = 1$/;"	v
loaded_puppet_syntax_checker	vim/bundle/syntastic/syntax_checkers/puppet.vim	/^let loaded_puppet_syntax_checker = 1$/;"	v
loaded_python_syntax_checker	vim/bundle/syntastic/syntax_checkers/python.vim	/^let loaded_python_syntax_checker = 1$/;"	v
loaded_ruby_syntax_checker	vim/bundle/syntastic/syntax_checkers/ruby.vim	/^let loaded_ruby_syntax_checker = 1$/;"	v
loaded_sass_syntax_checker	vim/bundle/syntastic/syntax_checkers/sass.vim	/^let loaded_sass_syntax_checker = 1$/;"	v
loaded_sh_syntax_checker	vim/bundle/syntastic/syntax_checkers/sh.vim	/^let loaded_sh_syntax_checker = 1$/;"	v
loaded_snips	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	vim/bundle/taglist.vim/plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/bundle/taglist.vim/plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/bundle/taglist.vim/plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	vim/bundle/taglist.vim/plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_tcl_syntax_checker	vim/bundle/syntastic/syntax_checkers/tcl.vim	/^let loaded_tcl_syntax_checker = 1$/;"	v
loaded_tex_syntax_checker	vim/bundle/syntastic/syntax_checkers/tex.vim	/^let loaded_tex_syntax_checker = 1$/;"	v
loaded_xhtml_syntax_checker	vim/bundle/syntastic/syntax_checkers/xhtml.vim	/^let loaded_xhtml_syntax_checker = 1$/;"	v
localeEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
localeList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
localedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^localedir = $(datarootdir)\/locale$/;"	m
localstatedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^localstatedir = $(DESTDIR)\/var$/;"	m
lock	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
log	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:log(msg)$/;"	f
lua.vim	vim/bundle/syntastic/syntax_checkers/lua.vim	1;"	F
mCommandT	vim/bundle/Command-T/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mailerEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
mailerList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
main_syntax	vim/bundle/vim-javascript/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
makewithruby	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
makewithruby	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
mandir	vim/bundle/Command-T/ruby/command-t/Makefile	/^mandir = $(prefix)\/share\/man$/;"	m
map	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
map	vim/bundle/supertab/plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	vim/bundle/supertab/plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
map	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:map(forced_p, lhs, rhs)$/;"	f
mapargs_pair_select	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_pair_select(lhs, pattern1, pattern2, flags, previous_mode)$/;"	f
mapargs_single_move	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_single_move(lhs, pattern, flags, previous_mode)$/;"	f
mapargs_single_select	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_single_select(lhs, pattern, flags, previous_mode)$/;"	f
match.c	vim/bundle/Command-T/ruby/command-t/match.c	1;"	F
match.h	vim/bundle/Command-T/ruby/command-t/match.h	1;"	F
match_for	vim/bundle/Command-T/spec/command-t/match_spec.rb	/^  def match_for path, pattern$/;"	f
match_limit	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_spec.rb	vim/bundle/Command-T/spec/command-t/match_spec.rb	1;"	F
match_text_for_idx	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_type	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
match_type	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
match_window.rb	vim/bundle/Command-T/ruby/command-t/match_window.rb	1;"	F
matchcursor	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matchcursor	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matcher.c	vim/bundle/Command-T/ruby/command-t/matcher.c	1;"	F
matcher.h	vim/bundle/Command-T/ruby/command-t/matcher.h	1;"	F
matcher_spec.rb	vim/bundle/Command-T/spec/command-t/matcher_spec.rb	1;"	F
matches=	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	vim/bundle/Command-T/ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
matchit.vim	vim/bundle/matchit.zip/plugin/matchit.vim	1;"	F
matlab.vim	vim/bundle/syntastic/syntax_checkers/matlab.vim	1;"	F
max_score_per_char	vim/bundle/Command-T/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:
menuBufEnter	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufEnter	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menuBufLeave	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
menucmd	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menucmd	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
menuprompt	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
metalEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
metalList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
mextargs	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migrationList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
migspc	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
missing	vim/bundle/Command-T/ruby/command-t/extconf.rb	/^def missing item$/;"	f
mixedcase	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:mixedcase(word)$/;"	f
mkeep	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
mkeep	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
model	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:model(...)$/;"	f
model	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
modelList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
move_cursor_to_selected_line	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def move_cursor_to_selected_line$/;"	f	class:CommandT.MatchWindow
multi-spec.sh	vim/bundle/Command-T/multi-spec.sh	1;"	F
mysearchpair	vim/bundle/vim-endwise/plugin/endwise.vim	/^function! s:mysearchpair(beginpat,endpat,synpat)$/;"	f
never_show_dot_files	vim/bundle/Command-T/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:
nextBufferName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
nokogiri	vim/bundle/Command-T/bin/nokogiri	1;"	F
noremap	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:noremap(forced_p, lhs, rhs)$/;"	f
normalize_options	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:normalize_options(flags)$/;"	f
notice_msg	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^function! s:notice_msg(msg)$/;"	f
object.clone	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:object.clone(...)$/;"	f
objmap	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:objmap(forced_p, lhs, rhs)$/;"	f
objnoremap	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:objnoremap(forced_p, lhs, rhs)$/;"	f
observerEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
observerList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
oldincludedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^oldincludedir = $(DESTDIR)\/usr\/include$/;"	m
openBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_selection	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
opfunc	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
opts	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:opts()$/;"	f
opts	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:opts()$/;"	f
os	vim/plugin/autotag.vim	/^import os$/;"	m
os.path	vim/plugin/autotag.vim	/^import os.path$/;"	m
padding_for_selected_match	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
parse_name	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:parse_name(arg)$/;"	f
parse_options	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:parse_options(opts)$/;"	f
parse_substitute	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:parse_substitute(bang,line1,line2,count,args)$/;"	f
parse_subvert	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:parse_subvert(bang,line1,line2,count,args)$/;"	f
path=	vim/bundle/Command-T/ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def path= str$/;"	f	class:CommandT.FileScanner
path_excluded?	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.FileScanner
path_utilities.rb	vim/bundle/Command-T/ruby/command-t/vim/path_utilities.rb	1;"	F
pathjoin	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
pathjoin	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
paths	vim/bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^    def paths$/;"	f	class:CommandT.BufferScanner
paths	vim/bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def paths$/;"	f	class:CommandT.FileScanner
pathsplit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pathsplit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pattern	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:pattern(dict,boundaries)$/;"	f
pattern	vim/bundle/vim-cucumber/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
pdfdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^pdfdir = $(docdir)$/;"	m
perl.vim	vim/bundle/syntastic/syntax_checkers/perl.vim	1;"	F
php.vim	vim/bundle/syntastic/syntax_checkers/php.vim	1;"	F
plugin.define_default_key_mappings	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.define_default_key_mappings(banged_p)  "{{{3$/;"	f
plugin.define_interface_key_mappings	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.define_interface_key_mappings()  "{{{3$/;"	f
plugin.interface_mapping_name	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.interface_mapping_name(obj_name, spec_name)  "{{{3$/;"	f
plugin.move	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.move(obj_name, flags, previous_mode)$/;"	f
plugin.new	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function s:plugin.new(plugin_name, obj_specs)$/;"	f
plugin.normalize	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function s:plugin.normalize()$/;"	f
plugin.select	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.select(obj_name, flags, previous_mode)$/;"	f
plugin.select_pair	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.select_pair(obj_name, flags, previous_mode)$/;"	f
pluginEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pluginList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:pop_command()$/;"	f
pop_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:pop_command()$/;"	f
pos_headp	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_headp(pos)$/;"	f
pos_lastp	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_lastp(pos)$/;"	f
pos_le	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_le(pos1, pos2)  " less than or equal$/;"	f
prefix	vim/bundle/Command-T/ruby/command-t/Makefile	/^prefix = $(DESTDIR)\/usr$/;"	m
preload	vim/bundle/Command-T/ruby/command-t/Makefile	/^preload = $/;"	m
prepare_movement	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:prepare_movement(previous_mode)$/;"	f
prepare_selection	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:prepare_selection(previous_mode)$/;"	f
prephelp	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:prephelp()$/;"	f
prephelp	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_error	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
process	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
prompt.rb	vim/bundle/Command-T/ruby/command-t/prompt.rb	1;"	F
promptToDelBuffer	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
proper_visual_mode	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:proper_visual_mode(lhs)$/;"	f
psdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^psdir = $(docdir)$/;"	m
puppet.vim	vim/bundle/syntastic/syntax_checkers/puppet.vim	1;"	F
push_chdir	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
push_chdir	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
putCursorInTreeWin	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	vim/bundle/Command-T/ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
python.vim	vim/bundle/syntastic/syntax_checkers/python.vim	1;"	F
rails#STATUSLINE	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#STATUSLINE	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#app	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#app	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#buffer	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#cache_clear	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#camelize	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#log_syntax	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#new_app_command	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#pluralize	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#singularize	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#statusline	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	vim/bundle/rails.vim/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
rails#underscore	vim/bundle/vim-rails/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
rails.vim	vim/bundle/rails.vim/autoload/rails.vim	1;"	F
rails.vim	vim/bundle/rails.vim/plugin/rails.vim	1;"	F
rails.vim	vim/bundle/vim-rails/autoload/rails.vim	1;"	F
rails.vim	vim/bundle/vim-rails/plugin/rails.vim	1;"	F
railsPluginAbolish	vim/bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAbolish	vim/bundle/vim-rails/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	vim/bundle/rails.vim/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginAuto	vim/bundle/vim-rails/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	vim/bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginDetect	vim/bundle/vim-rails/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	vim/bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
railsPluginMenu	vim/bundle/vim-rails/plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
rake	vim/bundle/Command-T/bin/rake	1;"	F
range_containsp	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_containsp(range_head, range_tail, target_pos)$/;"	f
range_no_text_without_edgesp	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_no_text_without_edgesp(range_head, range_tail)$/;"	f
range_select	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_select(range_head, range_tail)$/;"	f
range_validp	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_validp(range_head, range_tail)$/;"	f
readable_app	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_app	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_calculate_file_type	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_controller_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_default_rake_task	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_define_pattern	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_end_of	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_format	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_method_line	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_last_opening_line	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_line_count	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_model_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_preview_urls	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_related	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readable_type_name	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
readfile	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
recursive_match	vim/bundle/Command-T/ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f
redraw	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
redraw	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
refreshCurrent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
register_for_key_presses	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
reindent	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relative_path_under_working_directory	vim/bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^      def relative_path_under_working_directory path$/;"	f	class:CommandT.VIM.PathUtilities
relativize_path	vim/bundle/Command-T/spec/vim_formatter.rb	/^        def relativize_path path$/;"	f	class:Spec.Runner.Formatter.VimFormatter
relglob	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
relglob	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
reload_bundles	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:reload_bundles()$/;"	f
renderBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repeat	vim/bundle/repeat.vim/plugin/repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	vim/bundle/vim-repeat/autoload/repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
repeat#set	vim/bundle/repeat.vim/plugin/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#set	vim/bundle/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat.vim	vim/bundle/repeat.vim/plugin/repeat.vim	1;"	F
repeat.vim	vim/bundle/vim-repeat/autoload/repeat.vim	1;"	F
repeatPlugin	vim/bundle/repeat.vim/plugin/repeat.vim	/^augroup repeatPlugin$/;"	a
repeatPlugin	vim/bundle/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repo	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_bare	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_config(conf) dict abort$/;"	f
repo_dir	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head_ref	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
resetomnicomplete	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
resetomnicomplete	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restore	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restore_window_dimensions	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
revealBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rhs_escape	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:rhs_escape(pattern)$/;"	f
rquote	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
rquote	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
rspec	vim/bundle/Command-T/bin/rspec	1;"	F
rtp_add	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:rtp_add(dir) abort$/;"	f
rtp_add_a	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:rtp_add_a()$/;"	f
rtp_rm	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:rtp_rm(dir) abort$/;"	f
rtp_rm_a	vim/bundle/vundle/autoload/vundle/config.vim	/^func! s:rtp_rm_a()$/;"	f
ruby	vim/bundle/Command-T/ruby/command-t/Makefile	/^ruby = \/usr\/bin\/ruby1.8$/;"	m
ruby.vim	vim/bundle/syntastic/syntax_checkers/ruby.vim	1;"	F
ruby_compat.h	vim/bundle/Command-T/ruby/command-t/ruby_compat.h	1;"	F
ruby_inspect	vim/bundle/Command-T/ruby/command-t/ext.h	36;"	d
ruby_version	vim/bundle/Command-T/ruby/command-t/Makefile	/^ruby_version = 1.8$/;"	m
rubyblock.vim	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	1;"	F
rubyfiles	vim/bundle/Command-T/Makefile	/^rubyfiles   := $(shell find ruby -name '*.rb')$/;"	m
rubylibdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^rubylibdir = $(libdir)\/ruby\/$(ruby_version)$/;"	m
runjslint.js	vim/bundle/jslint.vim/ftplugin/javascript/jslint/runjslint.js	1;"	F
s	vim/bundle/vim-surround/plugin/surround.vim	/^      vmap  s    <Plug>Vsurround$/;"	m
s:Bookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:COMPOUND_ASSIGNMENT	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:CONTINUATION	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:DOT_ACCESS	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:INDENT_AFTER_KEYWORD	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:KeyMap	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:MAX_LOOKBACK	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MenuController	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:OUTDENT_AFTER	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:POSTFIX_CONDITION	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:Path	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:SINGLE_LINE_ELSE	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SYNTAX_COMMENT	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	vim/bundle/vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:Tlist_Skip_Refresh	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:abstract_prototype	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:app_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:app_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	vim/bundle/rails.vim/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:apps	vim/bundle/vim-rails/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:argRemap	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^let s:argRemap = {'"': '\\"'}$/;"	v
s:autotag_vim_version	vim/plugin/autotag.vim	/^let s:autotag_vim_version=1$/;"	v
s:b	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:bb	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:block_openers	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:block_openers = '\\zs(<def>|<if>|<do>|<module>|<class>)'$/;"	v
s:block_regex	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:bright	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:buffer_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:bundle	vim/bundle/vundle/autoload/vundle/config.vim	/^let s:bundle = {}$/;"	v
s:c	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:c0	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^let s:c0 = -1$/;"	v
s:c1	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^let s:c1 = -1$/;"	v
s:cache_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cache_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = "$JS_CMD"$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = '\/System\/Library\/Frameworks\/JavaScriptCore.framework\/Resources\/jsc'$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = 'js'$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = 'node'$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:cmd = 'cscript \/NoLogo '$/;"	v
s:cmd	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:cmd = "cd " . s:plugin_path . " && " . s:cmd . " " . s:plugin_path . "runjslint." . s:runjslint_ext$/;"	v
s:coffee_compile_buf	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^  let s:coffee_compile_buf = -1$/;"	v
s:coffee_compile_prev_buf	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^  let s:coffee_compile_prev_buf = -1$/;"	v
s:coffee_compile_prev_pos	vim/bundle/vim-coffee-script/ftplugin/coffee.vim	/^  let s:coffee_compile_prev_pos = []$/;"	v
s:colorscheme_list	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands = {}$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev     = s:commands.abstract.clone()$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev.options = {"buffer":0,"cmdline":0,"delete":0}$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.abstract = s:object.clone()$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.delete   = s:commands.abbrev.clone()$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.delete.options.delete = 1$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.search = s:commands.abstract.clone()$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.search.options = {"word": 0, "variable": 0, "flags": ""}$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute = s:commands.abstract.clone()$/;"	v
s:commands	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute.options = {"word": 0, "variable": 0, "flags": "g"}$/;"	v
s:commands	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:comment_escape	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:comment_escape = '\\v^[^#]*'$/;"	v
s:continuation_regex	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:cpo_save	vim/bundle/rails.vim/autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-cucumber/compiler/cucumber.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-endwise/plugin/endwise.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-rails/autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-surround/plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	/^let s:cpo_save = &cpo$/;"	v
s:cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:debug	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^let s:debug = 1$/;"	v
s:defaults_list	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:delimiterMap	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let s:delimiterMap[ft] = g:NERDCustomDelimiters[ft]$/;"	v
s:delimiterMap	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	vim/bundle/snipmate.vim/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	vim/bundle/snipmate.vim/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:efm_backtrace	vim/bundle/rails.vim/autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:efm_backtrace	vim/bundle/vim-rails/autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:emapleader	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:end_pattern	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:end_pattern = s:comment_escape . '\\zs<end>'$/;"	v
s:escape_chars	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>[]"$/;"	v
s:escape_chars	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:fg_pdef	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:file	vim/bundle/rails.vim/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file	vim/bundle/vim-rails/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:file_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:first_sign_id	vim/bundle/syntastic/plugin/syntastic.vim	/^let s:first_sign_id = 5000$/;"	v
s:firstmenu	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:global_cpo	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^let s:global_cpo = &cpo " store compatible-mode in local variable$/;"	v
s:green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:grep_cmd	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:grep_cmd			= ""$/;"	v
s:helper_dir	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:helper_dir = expand("<sfile>:h")$/;"	v
s:hpricot	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:hpricot			= 0$/;"	v
s:hpricot_cmd	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:hpricot_cmd		= ""$/;"	v
s:i	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:install_dir	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:install_dir = expand('<sfile>:p:h')$/;"	v
s:jslintrc	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:jslintrc = []$/;"	v
s:jslintrc	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:jslintrc = readfile(s:jslintrc_file)$/;"	v
s:jslintrc_file	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:jslintrc_file = expand('~\/.jslintrc')$/;"	v
s:keepcpo	vim/bundle/ZoomWin/autoload/ZoomWin.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	vim/bundle/ZoomWin/plugin/ZoomWinPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	vim/bundle/vim-align/autoload/Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim/bundle/vim-align/autoload/AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	vim/bundle/vim-align/plugin/AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	vim/bundle/vim-align/plugin/cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:l0	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^let s:l0 = -1$/;"	v
s:l1	vim/bundle/vim-indent-object/plugin/indent-object.vim	/^let s:l1 = -1$/;"	v
s:last_mps	vim/bundle/matchit.zip/plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	vim/bundle/matchit.zip/plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:lazycat_list	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:lenSpaceStr	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:line_term	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lines	vim/bundle/vim-coffee-script/syntax/eco.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:mapRemap	vim/bundle/vim-autoclose/plugin/autoclose.vim	/^let s:mapRemap = {'|': '<Bar>', ' ': '<Space>'}$/;"	v
s:mapleader	vim/bundle/vim-align/plugin/AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:menu_char_prefix	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modes	vim/bundle/supertab/plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	vim/bundle/supertab/plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:modifier	vim/bundle/vim-align/plugin/cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	vim/bundle/vim-align/plugin/cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:msl_regex	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:n	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:next_buffer_number	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:next_sign_id	vim/bundle/syntastic/plugin/syntastic.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
s:none	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:notslash	vim/bundle/matchit.zip/plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:ob	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:object	vim/bundle/vim-abolish/plugin/abolish.vim	/^let s:object = {}$/;"	v
s:old_cpo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:one_line_scope_regex	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:options_list	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:plugin	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^let s:plugin = {}$/;"	v
s:plugin_path	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:plugin_path = substitute(s:plugin_path, '\/', '\\', 'g')$/;"	v
s:plugin_path	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:plugin_path = s:install_dir . "\/jslint\/"$/;"	v
s:r	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:readable_prototype	vim/bundle/rails.vim/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:readable_prototype	vim/bundle/vim-rails/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:repo_prototype	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:runjslint_ext	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'js'$/;"	v
s:runjslint_ext	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'wsf'$/;"	v
s:running_windows	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:running_windows	vim/bundle/syntastic/plugin/syntastic.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:s	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:save_cpo	vim/bundle/matchit.zip/plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/bundle/supertab/plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vim/bundle/syntastic/syntax_checkers/c.vim	/^let s:save_cpo = &cpo$/;"	v
s:sid	vim/bundle/rails.vim/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:sid	vim/bundle/vim-rails/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:skip_expr	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:skip_pattern	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:skip_pattern = 'getline(".") =~ "\\\\w\\\\s\\\\+if"'$/;"	v
s:snippets	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:solarized_termtrans_default	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:sp_back	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:spaceStr	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:start_pattern	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:start_pattern = s:comment_escape . s:block_openers$/;"	v
s:syng_strcom	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:syng_strcom = 'javaScript\\%(String\\|RegexpString\\|CommentTodo\\|LineComment\\|Comment\\|DocComment\\)'$/;"	v
s:syng_string	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:syng_string = 'javaScript\\%(RegexpString\\)'$/;"	v
s:syng_stringdoc	vim/bundle/vim-javascript/indent/javascript.vim	/^let s:syng_stringdoc = 'javaScriptDocComment'$/;"	v
s:t_none	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:tabHelp	vim/bundle/supertab/plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:temp00	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:terminal_italic	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:terms_italic	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:tlist_app_name	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	vim/bundle/taglist.vim/plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	vim/bundle/taglist.vim/plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	vim/bundle/taglist.vim/plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~▾▸ ]\\+'$/;"	v
s:tree_up_dir_line	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	vim/bundle/supertab/plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	vim/bundle/supertab/plugin/supertab.vim	/^  let s:types =$/;"	v
s:u	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:view_types	vim/bundle/rails.vim/autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:view_types	vim/bundle/vim-rails/autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:vmode	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:xslt	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:xslt				= 0$/;"	v
s:xsltproc_cmd	vim/bundle/vim-rspec/plugin/vim-rspec.vim	/^let s:xsltproc_cmd	= ""$/;"	v
s:yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	vim/bundle/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
sanitize_path_string	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
sass.vim	vim/bundle/syntastic/syntax_checkers/sass.vim	1;"	F
save	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
sbindir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sbindir = $(exec_prefix)\/sbin$/;"	m
scanlineforuris	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scanlineforuris	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scanner.rb	vim/bundle/Command-T/ruby/command-t/scanner.rb	1;"	F
screen.rb	vim/bundle/Command-T/ruby/command-t/vim/screen.rb	1;"	F
scripts.vim	vim/bundle/vundle/autoload/vundle/scripts.vim	1;"	F
scrub	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
scrub	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
select	vim/bundle/Command-T/ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_a	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^function! s:select_a()$/;"	f
select_function_wrapper	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:select_function_wrapper(function_name, previous_mode)$/;"	f
select_i	vim/bundle/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^function! s:select_i()$/;"	f
select_next	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selection	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selectiveexpand	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
selectiveexpand	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
send	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:send(self,func,...)$/;"	f
set_bool	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_number	vim/bundle/Command-T/ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_status	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_file_finder	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def set_up_file_finder$/;"	f	class:CommandT.Controller
set_up_max_height	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
setopt	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setopt	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
settings.rb	vim/bundle/Command-T/ruby/command-t/settings.rb	1;"	F
setupStatusline	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
sh.vim	vim/bundle/syntastic/syntax_checkers/sh.vim	1;"	F
sharedstatedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sharedstatedir = $(prefix)\/com$/;"	m
shellesc	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellslash	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:shellslash(path)$/;"	f
show	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
showMenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
show_buffer_finder	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def show_buffer_finder$/;"	f	class:CommandT.Controller
show_cursor	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_file_finder	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def show_file_finder$/;"	f	class:CommandT.Controller
show_file_finder	vim/bundle/Command-T/ruby/command-t/stub.rb	/^    def show_file_finder$/;"	f	class:CommandT.Stub
sitearch	vim/bundle/Command-T/ruby/command-t/Makefile	/^sitearch = x86_64-linux$/;"	m
sitearchdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sitearchdir = $(sitelibdir)\/$(sitearch)$/;"	m
sitedir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sitedir = $(DESTDIR)\/usr\/local\/lib\/site_ruby$/;"	m
sitelibdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sitelibdir = $(sitedir)\/$(ruby_version)$/;"	m
snakecase	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:snakecase(word)$/;"	f
sname	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:sname()$/;"	f
sname	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	vim/bundle/snipmate.vim/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snipMate.vim	vim/bundle/snipmate.vim/after/plugin/snipMate.vim	1;"	F
snipMate.vim	vim/bundle/snipmate.vim/autoload/snipMate.vim	1;"	F
snipMate.vim	vim/bundle/snipmate.vim/plugin/snipMate.vim	1;"	F
snippet.vim	vim/bundle/snipmate.vim/syntax/snippet.vim	1;"	F
snippets_dir	vim/bundle/snipmate.vim/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
snr_prefix	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:snr_prefix(sfile)$/;"	f
solarized.vim	vim/bundle/vim-colors-solarized/colors/solarized.vim	1;"	F
sort	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:sort(a,b)$/;"	f
sorted_matches_for	vim/bundle/Command-T/ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
specEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
specList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
spec_helper.rb	vim/bundle/Command-T/spec/spec_helper.rb	1;"	F
srcdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^srcdir = .$/;"	m
startswith	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
startswith	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
stepmatch	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
steps	vim/bundle/vim-cucumber/ftplugin/cucumber.vim	/^function! s:steps(lnum)$/;"	f
str_len	vim/bundle/Command-T/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:
str_p	vim/bundle/Command-T/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:
string	vim/plugin/autotag.vim	/^import string$/;"	m
stripMarkupFromLine	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stub.rb	vim/bundle/Command-T/ruby/command-t/stub.rb	1;"	F
stub_finder	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^  def stub_finder(sorted_matches=[])$/;"	f
stub_match_window	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^  def stub_match_window(selection)$/;"	f
stub_prompt	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^  def stub_prompt(abbrev='')$/;"	f
stub_vim	vim/bundle/Command-T/spec/command-t/controller_spec.rb	/^  def stub_vim(working_directory)$/;"	f
stylesheetEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
stylesheetList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim/bundle/rails.vim/plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sub	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim/bundle/vim-rails/plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
subesc	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:subesc(pattern)$/;"	f
subprocess	vim/plugin/autotag.vim	/^   import subprocess$/;"	m
substitute_command	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:substitute_command(cmd,bad,good,flags)$/;"	f
subvert_dispatcher	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:subvert_dispatcher(bang,line1,line2,count,args)$/;"	f
supertab.vim	vim/bundle/supertab/plugin/supertab.vim	1;"	F
surround.vim	vim/bundle/vim-surround/plugin/surround.vim	1;"	F
syn	vim/bundle/vim-cucumber/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
sync	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! s:sync(bang, bundle) abort$/;"	f
synname	vim/bundle/vim-endwise/plugin/endwise.vim	/^function! s:synname()$/;"	f
syntastic#ErrorBalloonExpr	vim/bundle/syntastic/autoload/syntastic.vim	/^function! syntastic#ErrorBalloonExpr()$/;"	f
syntastic#HighlightErrors	vim/bundle/syntastic/autoload/syntastic.vim	/^function! syntastic#HighlightErrors(errors, termfunc)$/;"	f
syntastic.vim	vim/bundle/syntastic/autoload/syntastic.vim	1;"	F
syntastic.vim	vim/bundle/syntastic/plugin/syntastic.vim	1;"	F
syntastic_auto_jump	vim/bundle/syntastic/plugin/syntastic.vim	/^    let syntastic_auto_jump=0$/;"	v
sys	vim/plugin/autotag.vim	/^import sys$/;"	m
sysconfdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^sysconfdir = $(DESTDIR)\/etc$/;"	m
tabpagevar	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
taglist.vim	vim/bundle/taglist.vim/plugin/taglist.vim	1;"	F
target_prefix	vim/bundle/Command-T/ruby/command-t/Makefile	/^target_prefix = $/;"	m
taskEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
taskList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
tcl.vim	vim/bundle/syntastic/syntax_checkers/tcl.vim	1;"	F
tex.vim	vim/bundle/syntastic/syntax_checkers/tex.vim	1;"	F
textobj#user#define	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#define(pat0, pat1, pat2, guideline)  "{{{2$/;"	f
textobj#user#move	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#move(pattern, flags, previous_mode)$/;"	f
textobj#user#plugin	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#plugin(plugin_name, obj_specs)  "{{{2$/;"	f
textobj#user#select	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#select(pattern, flags, previous_mode)$/;"	f
textobj#user#select_pair	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#select_pair(pattern1, pattern2, flags, previous_mode)$/;"	f
throw	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:throw(msg)$/;"	f
throw	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
time	vim/plugin/autotag.vim	/^import time$/;"	m
toggle	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toggle_focus	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
togglebg#map	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	/^function! togglebg#map(mapActivation)$/;"	f
togglebg.vim	vim/bundle/vim-colors-solarized/autoload/togglebg.vim	1;"	F
topdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^topdir = \/usr\/lib\/ruby\/1.8\/x86_64-linux$/;"	m
traceback	vim/plugin/autotag.vim	/^   import traceback$/;"	m
treeExistsForBuf	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
truncated_match	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
try	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
try	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
txtfiles	vim/bundle/Command-T/Makefile	/^txtfiles    := $(shell find doc -name '*.txt')$/;"	m
u	vim/bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> u u:JSLintUpdate<CR>$/;"	m
u	vim/bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
u	vim/bundle/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
unfocus	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	vim/bundle/Command-T/ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unimpaired.vim	vim/bundle/vim-unimpaired/plugin/unimpaired.vim	1;"	F
uniq	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:uniq(list)$/;"	f
unique	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unittestEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unittestList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unknown_coercion	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:unknown_coercion(letter,word)$/;"	f
unload	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unlock	vim/bundle/Command-T/ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
upDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
uppercase	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:uppercase(word)$/;"	f
user.vim	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	1;"	F
vendorarchdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^vendorarchdir = $(vendorlibdir)\/$(sitearch)$/;"	m
vendordir	vim/bundle/Command-T/ruby/command-t/Makefile	/^vendordir = $(libdir)\/ruby\/vendor_ruby$/;"	m
vendorlibdir	vim/bundle/Command-T/ruby/command-t/Makefile	/^vendorlibdir = $(vendordir)\/$(ruby_version)$/;"	m
viewEdit	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewEdit	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewList	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:viewspattern()$/;"	f
viewspattern	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vim	vim/plugin/autotag.vim	/^import vim$/;"	m
vim-rspec.rb	vim/bundle/vim-rspec/plugin/vim-rspec.rb	1;"	F
vim-rspec.vim	vim/bundle/vim-rspec/plugin/vim-rspec.vim	1;"	F
vim-rspec.vim	vim/bundle/vim-rspec/syntax/vim-rspec.vim	1;"	F
vim.rb	vim/bundle/Command-T/ruby/command-t/vim.rb	1;"	F
vim_formatter.rb	vim/bundle/Command-T/spec/vim_formatter.rb	1;"	F
vimfiles	vim/bundle/Command-T/Makefile	/^vimfiles    := $(shell find plugin -name '*.vim')$/;"	m
vt100?	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
vundle#config#bundle	vim/bundle/vundle/autoload/vundle/config.vim	/^func! vundle#config#bundle(arg, ...)$/;"	f
vundle#config#init	vim/bundle/vundle/autoload/vundle/config.vim	/^func! vundle#config#init()$/;"	f
vundle#config#init_bundle	vim/bundle/vundle/autoload/vundle/config.vim	/^func! vundle#config#init_bundle(name, opts)$/;"	f
vundle#config#require	vim/bundle/vundle/autoload/vundle/config.vim	/^func! vundle#config#require(bundles) abort$/;"	f
vundle#installer#clean	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! vundle#installer#clean(bang) abort$/;"	f
vundle#installer#helptags	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! vundle#installer#helptags(bundles) abort$/;"	f
vundle#installer#install	vim/bundle/vundle/autoload/vundle/installer.vim	/^func! vundle#installer#install(bang, ...) abort$/;"	f
vundle#rc	vim/bundle/vundle/autoload/vundle.vim	/^func! vundle#rc(...) abort$/;"	f
vundle#scripts#all	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! vundle#scripts#all(bang, ...)$/;"	f
vundle#scripts#complete	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! vundle#scripts#complete(a,c,d)$/;"	f
vundle#scripts#install	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! vundle#scripts#install() abort$/;"	f
vundle#scripts#reload	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! vundle#scripts#reload() abort$/;"	f
vundle#scripts#setup_view	vim/bundle/vundle/autoload/vundle/scripts.vim	/^func! vundle#scripts#setup_view() abort$/;"	f
vundle.vim	vim/bundle/vundle/autoload/vundle.vim	1;"	F
vundle.vim	vim/vundle.vim	1;"	F
warn	vim/bundle/Command-T/ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warn	vim/bundle/rails.vim/autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	vim/bundle/vim-fugitive/plugin/fugitive.vim	/^function! s:warn(str)$/;"	f
warn	vim/bundle/vim-rails/autoload/rails.vim	/^function! s:warn(str)$/;"	f
window.rb	vim/bundle/Command-T/ruby/command-t/vim/window.rb	1;"	F
wise	vim/bundle/vim-textobj-user/autoload/textobj/user.vim	/^function! s:wise(default)$/;"	f
words	vim/bundle/vim-abolish/plugin/abolish.vim	/^function! s:words()$/;"	f
wrap	vim/bundle/repeat.vim/plugin/repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	vim/bundle/vim-repeat/autoload/repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
xhtml.vim	vim/bundle/syntastic/syntax_checkers/xhtml.vim	1;"	F
xterm?	vim/bundle/Command-T/ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
yS	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      yS   <Plug>YSurround$/;"	m
ySS	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      ySS  <Plug>YSsurround$/;"	m
ySs	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      ySs  <Plug>YSsurround$/;"	m
ys	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      ys   <Plug>Ysurround$/;"	m
yss	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap      yss  <Plug>Yssurround$/;"	m
